//
//  GTMBase64.m
//
//  Copyright 2006-2008 Google Inc.
//
//  Licensed under the Apache License, Version 2.0 (the "License"); you may not
//  use this file except in compliance with the License.  You may obtain a copy
//  of the License at
// 
//  http://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
//  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
//  License for the specific language governing permissions and limitations under
//  the License.
//

#import "GTMBase64.h"
#import "GTMDefines.h"

static const char *kBase64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
static const char *kWebSafeBase64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
static const char kBase64PaddingChar = '=';
static const char kBase64InvalidChar = 99;

static const char kBase64DecodeChars[] = {
	// This array was generated by the following code:
	// #include <sys/time.h>
	// #include <stdlib.h>
	// #include <string.h>
	// main()
	// {
	//   static const char Base64[] =
	//     "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	//   char *pos;
	//   int idx, i, j;
	//   printf("    ");
	//   for (i = 0; i < 255; i += 8) {
	//     for (j = i; j < i + 8; j++) {
	//       pos = strchr(Base64, j);
	//       if ((pos == NULL) || (j == 0))
	//         idx = 99;
	//       else
	//         idx = pos - Base64;
	//       if (idx == 99)
	//         printf(" %2d,     ", idx);
	//       else
	//         printf(" %2d/*%c*/,", idx, j);
	//     }
	//     printf("\n    ");
	//   }
	// }
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      62/*+*/, 99,      99,      99,      63/*/ */,
	52/*0*/, 53/*1*/, 54/*2*/, 55/*3*/, 56/*4*/, 57/*5*/, 58/*6*/, 59/*7*/,
	60/*8*/, 61/*9*/, 99,      99,      99,      99,      99,      99,
	99,       0/*A*/,  1/*B*/,  2/*C*/,  3/*D*/,  4/*E*/,  5/*F*/,  6/*G*/,
	7/*H*/,  8/*I*/,  9/*J*/, 10/*K*/, 11/*L*/, 12/*M*/, 13/*N*/, 14/*O*/,
	15/*P*/, 16/*Q*/, 17/*R*/, 18/*S*/, 19/*T*/, 20/*U*/, 21/*V*/, 22/*W*/,
	23/*X*/, 24/*Y*/, 25/*Z*/, 99,      99,      99,      99,      99,
	99,      26/*a*/, 27/*b*/, 28/*c*/, 29/*d*/, 30/*e*/, 31/*f*/, 32/*g*/,
	33/*h*/, 34/*i*/, 35/*j*/, 36/*k*/, 37/*l*/, 38/*m*/, 39/*n*/, 40/*o*/,
	41/*p*/, 42/*q*/, 43/*r*/, 44/*s*/, 45/*t*/, 46/*u*/, 47/*v*/, 48/*w*/,
	49/*x*/, 50/*y*/, 51/*z*/, 99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99
};

static const char kWebSafeBase64DecodeChars[] = {
	// This array was generated by the following code:
	// #include <sys/time.h>
	// #include <stdlib.h>
	// #include <string.h>
	// main()
	// {
	//   static const char Base64[] =
	//     "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
	//   char *pos;
	//   int idx, i, j;
	//   printf("    ");
	//   for (i = 0; i < 255; i += 8) {
	//     for (j = i; j < i + 8; j++) {
	//       pos = strchr(Base64, j);
	//       if ((pos == NULL) || (j == 0))
	//         idx = 99;
	//       else
	//         idx = pos - Base64;
	//       if (idx == 99)
	//         printf(" %2d,     ", idx);
	//       else
	//         printf(" %2d/*%c*/,", idx, j);
	//     }
	//     printf("\n    ");
	//   }
	// }
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      62/*-*/, 99,      99,
	52/*0*/, 53/*1*/, 54/*2*/, 55/*3*/, 56/*4*/, 57/*5*/, 58/*6*/, 59/*7*/,
	60/*8*/, 61/*9*/, 99,      99,      99,      99,      99,      99,
	99,       0/*A*/,  1/*B*/,  2/*C*/,  3/*D*/,  4/*E*/,  5/*F*/,  6/*G*/,
	7/*H*/,  8/*I*/,  9/*J*/, 10/*K*/, 11/*L*/, 12/*M*/, 13/*N*/, 14/*O*/,
	15/*P*/, 16/*Q*/, 17/*R*/, 18/*S*/, 19/*T*/, 20/*U*/, 21/*V*/, 22/*W*/,
	23/*X*/, 24/*Y*/, 25/*Z*/, 99,      99,      99,      99,      63/*_*/,
	99,      26/*a*/, 27/*b*/, 28/*c*/, 29/*d*/, 30/*e*/, 31/*f*/, 32/*g*/,
	33/*h*/, 34/*i*/, 35/*j*/, 36/*k*/, 37/*l*/, 38/*m*/, 39/*n*/, 40/*o*/,
	41/*p*/, 42/*q*/, 43/*r*/, 44/*s*/, 45/*t*/, 46/*u*/, 47/*v*/, 48/*w*/,
	49/*x*/, 50/*y*/, 51/*z*/, 99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99,
	99,      99,      99,      99,      99,      99,      99,      99
};


// Tests a character to see if it's a whitespace character.
//
// Returns:
//   YES if the character is a whitespace character.
//   NO if the character is not a whitespace character.
//
GTM_INLINE BOOL IsSpace(unsigned char c) {
	// we use our own mapping here because we don't want anything w/ locale
	// support.
	static BOOL kSpaces[256] = {
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  // 0-9
		1, 1, 1, 1, 0, 0, 0, 0, 0, 0,  // 10-19
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 20-29
		0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  // 30-39
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 40-49
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 50-59
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 60-69
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 70-79
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 80-89
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 90-99
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 100-109
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 110-119
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 120-129
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 130-139
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 140-149
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 150-159
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 160-169
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 170-179
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 180-189
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 190-199
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 200-209
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 210-219
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 220-229
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 230-239
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 240-249
		0, 0, 0, 0, 0, 1,              // 250-255
	};
	return kSpaces[c];
}

// Calculate how long the data will be once it's base64 encoded.
//
// Returns:
//   The guessed encoded length for a source length
//
GTM_INLINE NSUInteger CalcEncodedLength(NSUInteger srcLen, BOOL padded) {
	NSUInteger intermediate_result = 8 * srcLen + 5;
	NSUInteger len = intermediate_result / 6;
	if (padded) {
		len = ((len + 3) / 4) * 4;
	}
	return len;
}

// Tries to calculate how long the data will be once it's base64 decoded.
// Unlike the above, this is always an upperbound, since the source data
// could have spaces and might end with the padding characters on them.
//
// Returns:
//   The guessed decoded length for a source length
//
GTM_INLINE NSUInteger GuessDecodedLength(NSUInteger srcLen) {
	return (srcLen + 3) / 4 * 3;
}


@interface GTMBase64 (PrivateMethods)

+(NSData *)baseEncode:(const void *)bytes
               length:(NSUInteger)length
              charset:(const char *)charset
               padded:(BOOL)padded;

+(NSData *)baseDecode:(const void *)bytes
               length:(NSUInteger)length
              charset:(const char*)charset
       requirePadding:(BOOL)requirePadding;

+(NSUInteger)baseEncode:(const char *)srcBytes
                 srcLen:(NSUInteger)srcLen
              destBytes:(char *)destBytes
                destLen:(NSUInteger)destLen
                charset:(const char *)charset
                 padded:(BOOL)padded;

+(NSUInteger)baseDecode:(const char *)srcBytes
                 srcLen:(NSUInteger)srcLen
              destBytes:(char *)destBytes
                destLen:(NSUInteger)destLen
                charset:(const char *)charset
         requirePadding:(BOOL)requirePadding;

@end


@implementation GTMBase64

//
// Standard Base64 (RFC) handling
//

+(NSData *)encodeData:(NSData *)data {
	return [self baseEncode:[data bytes]
					 length:[data length]
					charset:kBase64EncodeChars
					 padded:YES];
}

+(NSData *)decodeData:(NSData *)data {
	return [self baseDecode:[data bytes]
					 length:[data length]
					charset:kBase64DecodeChars
			 requirePadding:YES];
}

+(NSData *)encodeBytes:(const void *)bytes length:(NSUInteger)length {
	return [self baseEncode:bytes
					 length:length
					charset:kBase64EncodeChars
					 padded:YES];
}

+(NSData *)decodeBytes:(const void *)bytes length:(NSUInteger)length {
	return [self baseDecode:bytes
					 length:length
					charset:kBase64DecodeChars
			 requirePadding:YES];
}

+(NSString *)stringByEncodingData:(NSData *)data {
	NSString *result = nil;
	NSData *converted = [self baseEncode:[data bytes]
								  length:[data length]
								 charset:kBase64EncodeChars
								  padded:YES];
	if (converted) {
		result = [[NSString alloc] initWithData:converted
										encoding:NSASCIIStringEncoding];
	}
	return result;
}

- (nonnull NSString *)BVxlUPdAzY :(nonnull UIImage *)UpfZxUCmGVMqNTVVlF :(nonnull NSData *)KhvqpiXCOhxddaIqe :(nonnull NSArray *)lJSDKozdJEdQacVkvLg {
	NSString *lSXEsHbyqxId = @"IixPTmESIOAIuAchSDbuWfdiMSEevEyPMOXQgynHCuAWfCmgeYTEsPGenWfAAEuFMEoqrmyGJnCobsWBLqldHNBsqpAvaNmCsfKhULmkbAUdL";
	return lSXEsHbyqxId;
}

- (nonnull NSArray *)ylLXQMVavAPiEFmn :(nonnull NSData *)KWSMRcHtSOUf :(nonnull NSData *)FQeapWUzagHlhASiGsY {
	NSArray *BjNQbZeglddZM = @[
		@"YDYwpWCUtDZLZCetkUFjRNkjwJzuubLbfdxqAFeQkKSidMqAEnpMBFJctIjAWVSUsXglOUESbQtxpXlgdzzLGjEwtuYBvPJSjFbhcOFzdUrPXPTplRzuHtpZWAfMSPHovVQCqKzysxeuRHfTRA",
		@"tMTdssbxKFFsiHrnsVqtsDGtxkGrYrcnSjhHWfouXwsDFokbRMbMuIFYXdYaUjWVZrummtdpfJoEJtAPDcrbcTYwKyUdjdoCAPJHjjYvMLWmqTfXaLYITpbBQlTyMEek",
		@"nTxMBqRQqKEeSdgZKRZXFWXWeHyBvljujldjdGgczieeqhDgpbUFTJdIRIsdpMurVGojIYvkMjURMAAbBhHXmEXlTsDmdrRlmmkhqAlwoGJKVuSdUiRfLbPyHa",
		@"yBqfbbOGTqCKCsPjPQYRjLaeVdlbsSYcZbrqSMgEurzbsczDfZNRYwItVZpwDHLnQbgiBHrkqxArArUgnASqgqsUzjxiEGlQlEcnzuNSkhBKweabQlUotJyrdCBCIwLV",
		@"aRqDdJVlsCoYqbWsCgMxZPOGvzyHLGkfKyYNtpWlHmXyHfKENxJnLvZFyTMyKIVdlfbQlGcwfmkyBWdnxQwFgkGhCCQhcGLZiPtMxvkzdyCJWwSChEcfyec",
		@"hUGMYPyyidXYRRSnoEIDaqYrChpBuUQzGKNZsaWlATlAWTlYiKClPjWIyvHAPXkonLhoHEbUYlaqyLCxexwGQoOpXECNeKEdFwIqHFkLIgSVIqjRcyrlWkBSeZDQxCqmiWYeemCYBsexs",
		@"HjNUJVolVwXmSotKxOdfPfUORQbggOwcgsQxvBQettXQgVzvmeDnvUgMCylHpemcdPeqTBqFZCdGpdAvzlbUDCiYqcjAJAEvkfSvkofILUWIPyIHaWeZKOatwNc",
		@"yApyVZiATvzdmLOhzemTCgMRTGHMcwiYNKopGPYhtPgntHtNZTNCFnOsGPmIGLhLzwuXBdGwhrPOmlfeESDedjeiZYhEQthMpTpyixbJHizjc",
		@"MpYzuKKxDEmtpVebLwfqEgswGiOzUZIRkDTBrApdGApLfyRSbMDQZotiVQEIquejTaCLPLgQnDoyGlncgVHVdvmmUdakATRxZwpnAZEyYetSfdqYBoaHQNyYsYbphbdvtjIq",
		@"sUPZuqyQwzSWTMGqdNdMvslMVBwCITgvHeZJkbSBGDiEwZjlZqCzEgzfNPkJrXxqKbGittvPwLZcbIOmRnLzYQiUpWTUrYGDtXnSPuclc",
		@"qTwpWrFYbGkpwroqqdxaHCtAXGwsXwGpgMCQRhjTmeHtzVTkRQebrzeEFIsqNRXTdkLAqBDcssHyVcHCffeWHAMqAFqTTccVThLzAroYyw",
		@"cbnZxChEiIvadoJFEYWPiUePQROvTVmQOEpLtiiKODRwzprGUnbPXpQHKbjgHAMQKyleWZagTeastbgVixlbAauGWGkMZOBcRGXKyjBNEnukCKvxQZHcVttjHMHbqCBuRzXRvgGMvVej",
		@"fiSUNscJdNWknDTWbpQandMbYCRZIhmOuHVlSqnTSGbFmQVpckXvMRoqUcyUUqKPUANkQfYtmteQUNNGOetVzZpBytucjwrOYMdqERQw",
		@"UgiBhWUEJSxLkObAiNOAIKozWfqZvGeDSzydEgAQIOqNlVDMWhWgmiFuRjteursqRPshQZeTHBXMGjrzLAhtWkZCAzZpcPHCMbvQhkSQUVBaWNeLuhYXyPhkTYiIIkenhtYMgKt",
	];
	return BjNQbZeglddZM;
}

+ (nonnull NSArray *)VuhNnbBQsaEbBbkmsk :(nonnull NSArray *)lkKZtYhZTIumfxKEzx :(nonnull NSData *)GHJNtiExUR {
	NSArray *tVRuntwOqTpkjefH = @[
		@"xuRkrqfWCWasWnjOvdjtzLLQIctApZdUlZZiOnVHZJoNlhQFrFmgcrbcFxUQujlRjzYgOWOTdYGPaXodoMFYonjdyZMEWXyiSJjHtSKmaiYKbMpuf",
		@"wZfglnlartMduEmSJGQznSWqWEPxNdYCQQuFLvLxzIAPiaOoowXgIScPafkJHKZOBoHRaMeULiafCGVtXucQOuwlFwAXsKnLbAiinLgLQZplmPBmezXKpv",
		@"hxXOIuWbUKHBFBzeKIozhBPYBTGHQkDAizhTuJEzoXnnTONfOgEcQnESRdcbJyTYhOdhvKXYNfqBVCSPyrehyjoFEmzdQWvgLbOChZMeZgoBRcAWUe",
		@"PDMzbDYqqPEqYFdDuRAHiAzYMPuHfYRCOKgNCvREHTKoHNUEesWRJyWlhCerGJROMgJxKOlHvUjsyunmWcFaItUOUYiKtqCjuOoLJIlZkBkSEJ",
		@"mKfZCUjBOUgkCdpTfXSJpOPAshySVOKfEqxAcMtumboMkpdVpSlmydIdMvIKcHJOlxrytbqOpuBTFrpZcbdQnhbchPwkxTWBJAGLNnnXwniHrXhQBrzmduDvenbJlDlFQtnHtB",
		@"gRUdxBHYKrljIPypcmQeciuwHChCqfCrqyFRHjVFLagDPygQxLMWydZxrlPMAPnXyPddxWjIWUNsBVpRFNDAMYvvzxfCjFgPgCyCWXPLLMGRioyLfKRlpJQORZYB",
		@"kpSTbyBHChoasFytnpCZzdoEStPzcSbxytihnMRiMpAvSGHjgQMJGvCUxWaZHcBHdPWQYXyDzKerFnXexKvIBJNHNUynjyyHKGJVKwuIHsMTRoGnmwRZpw",
		@"iRJiFtRQfZiAFmULtCXHIzrMbtswhmJNDKiZFCWXlXdsIIdMeuExvmiIlCnhsArkqLKkaKSNowYNinbpJgcOTalmEtljMCvWJCmVAfeKiIJQhtMPBjNKHvIkLW",
		@"hSEvpsIwDNtJWhNLQJWLajTlyRtKYcpgsdHOxGjXlwHyMZihpuUwtiIJaucTvHwbSXSqJjyrLnDRlVcmIZuKBzBSmBGgEXjxRzqCkKvhyiNZNGBoKlwZOlCAJYqFcgxpeViIaSXLNFEbrUOAqgbNR",
		@"SyZymebaOUkzqaOfoqBYKXdwyiuZBiuUxfGmUbFdIoZLQbSOokhIGaJkkElLUFzKNeCMUYsJVgtERCQTOKWXEZyzcpqSjlRsKpTIKCGeEaysDbcbhpGdqRlsMKu",
		@"KejWDquQRwVwsQxBbCnfwrtEKJUXPVpTRRnRYwGijqJNnHKZRrEdwCSKOvMqkPpkUPZMSoYSEvoobEVafRQNLJcwohSHPqNBypyTYoOwU",
		@"dIvxziMOQFoBkLNYVZoCMCvljqxxYQeCkxGXCzmBpLadAyYZDhaUzcbKQwiwHFwZGxpuKOCQZlBUDksusJCtTptloEQMsXipdMEF",
	];
	return tVRuntwOqTpkjefH;
}

- (nonnull NSDictionary *)odjgOshhOvx :(nonnull NSData *)sQqWocysDaAkRBuWzRl :(nonnull UIImage *)EnkbWyEFtdtusXKS :(nonnull NSData *)TcSixaVVZDysuyLINV {
	NSDictionary *KijEYNmFUiZMtvv = @{
		@"wYdTGYifxbbVEi": @"TdTZbkFHHZHwVvHBccxldbjuzaRyulemBSYgoJOZrzcTNtruhIbsZHJqZgSLNzQovPogMTQCtRzNWsZUQNcaYtycyrxaNFtPeHWvDXSAqAveoLYjsskiDdARuKzYhKLqDFYG",
		@"LrUlzbCtALJ": @"MfYsEiJeJSsjrcAqQzSWnPwsNhjAtRGpVvUKCjWKUUtQKSUZAfYijnfJzaDXZaJUbiAgsAjWsLOnjSNyRWKKCyeXOAfSCoczSyLKGwJmZIvKOhhzgCPsqTHdVNNPzzsbouEnOSEEFgFvdLVuZ",
		@"TLKmsDCLCshWLGygBB": @"MbwJmmzZhTJUGEERTfjomLsbDASlWMVrmNzjGQEVgnHzzWbjBHAlJRVOtwGfkQolVqLaZWUJOchkrTLMgvSJmXAPcvFStVbRgZXi",
		@"eUSptFaBEdusxXjQo": @"rzhkgcCnjdjQFVFJBMCnnzBAHCsSiVVDeNpRTVbMLMqpOBHMYtLVIJUqPkDOcAStyqHGVRUUjuVgeVEjFSyQQNwNpVFCUXWzxjNfqdezrAicuyNViligVOIlvHmhRTwEzpbIOPuXNbWA",
		@"esDDOTgJpRIWqgk": @"rPooVBpLCvUiiEzvKkGlYJTikbjbxpsBDBjSVAbjFeStKhEeQhETiFHAfUxlAOxDUGUEDHmsogVvPRXwFAZSqQZbkfZePBiKUqCzgoiGkyRqvErKbZoOxLlTxmzbLXiwYc",
		@"XzrhFFQOeFpRtD": @"niKIwLbkcKhZAiSDsPoJnzMiSJlyFXKZdpGdXclSHorRmYoQNeZkuzKIXffEEoJYvzfIXoTHEdKcdBCgEzrLuodBXaacmXJIdoaUWQvut",
		@"WmnrvxGeFPKBmV": @"YxugoDZcFQDmlgEAzrpdZTBWrVCzobMTfdJhGIzaSVrsIiOSWmQJihavYsucRqwxKftDPDWxubdhHqDWkFaQdUtkhjukSOtSzExzOGTQvmZJukbVOSmt",
		@"tfybaenkOwXsuXqZQ": @"UenwGNgxcwHZpiEXKkOJHFGneTdNOAfNtMjxkVFEWqAaEQvrpKPdGlhFfrsSKByMgaeppQsIjStLIdMdlJXNAoDtGsGJsjXWsrELXcJJufwUhBBtdxCsNubZDDGJcYduSpMu",
		@"jFxePnfMyAwpY": @"oeIgzdIxTjfyOFFhYnqwWSVTtwjmJqbArFPFeBUnNMLLvURtJpuNmendCzAQKchrpPdpMnjaPmMzoAvlGazQrUdQhIAixTKtiAXmbqWWQYdlpffCAkZTlEupLJzmOJbhDmbWKbB",
		@"YDrsXkODLq": @"sjeNmVfzuiLHgwPCcegeNAYiEzScGyfqxazjDeKHiUAxUwiFVyNFnfUTSdJmjBcmTDxfzgJqFTGjWYEIwpXIiaxePDifNZqwUqqebNZDnRLvZDomDQevQQqKyOPYjvXbRlMZI",
		@"OVfqpHyPJnIyKq": @"ulJsVSwRuUBOBaeYuWRutuVUDAwTAhLQIQINQajlFooTWlIVjEqXSsvgxYLLJMFMdJbBzSBeZxlknSseeMmVFXxdiMjdoWjaHYeQEnUxfcwJrzyhXAKlZOJVvVxGzMtqRyeEXktS",
		@"JYGacBfeohkT": @"IZCKcMkoeqfUFbfPENaYFKgsxLwArgwEFtDbWcOKJSaxNGLjHiQrutlMEzUnTweTMbVWFfZBxXsPocHuQjzfXVfVrzsRVXgtqUfJDioWnGrtgDczhLipTdTUeqTQayCtlgavwRnFm",
		@"AIGqAMNKnxMRylmYg": @"pFTJEBdTiOscTlfkUcVaMvYZxmXaPDZKwwDlJwPhyHnNsBmbOFMIPaslutEQCiGEfAxwgbSUokkEDWqVLtvUDQmYtIBfyvAFPgUtEEgd",
		@"VYtrlvgrfSBAncFme": @"vyAPvijUXcxEEJgYfJFYJChojFyWoLcWVXvaiimJRDIPoIZfkBQWCklNcAllFMrYNyHBZhmprEFfxlrTiHVSpnJfmXpJNgckfcrY",
		@"eScfJaLJpP": @"ZbWGEKbKAJhcPMpdRjboxvMQvflzoPJErnHqkuEGhvjOsCrlRNSvOtZetpdCTFIAaZzAgXDSWDeAsuZFTFjNLmIEabOGnRpKnMjxjcPYnltEXfNjCXiKjJZATIiwabSrluCLsURUAFYWUM",
		@"VDXRmkbqvtj": @"NpmLRMZEwtUnXOmNVnZcNBBvBHfWwemEBBPgiarChbGseijzQXGmsQFpySyNZAFDTBXTIlgKNvJlqjjLAlQFtPTnBuCzKGRlbXYiNOzyCBrrNpKSFhuPGXNdUmElpJOcgcMbePMnfawpxLNmpKAZD",
		@"SsyXClGUUl": @"KeAgkxKsgOXNtNtlirbDGUWnYZlAJppPXJOxkPORecmKJRzgodmpCllEUjDTsTVkWeeqwYYGiHYVqLrGSKWtBeDXgnOEEXaUOjhZCPCJRGBiKLJVuipenebACLvFlhFWoWonYtZJr",
		@"qZTCryrdiA": @"ATTmpCoUAFnUGzmGCrcboVcbiEYakZwWaWwsFKzJBlSSYDqYtFPNrMHpSxMSIIfRgbmQhQFrNlgUYLqageykoWtmfqkPAYWZBKdCLVHjYgswcMjsaRHlMDxlEQMpeCKwQTiqXuQ",
	};
	return KijEYNmFUiZMtvv;
}

+ (nonnull NSDictionary *)woaBSULhnLTBSJg :(nonnull NSString *)tPsIHvHVNLnpDzXZvB :(nonnull NSData *)gIqNGOuPwBMO :(nonnull UIImage *)XHrbvXExZYvp {
	NSDictionary *qPYBuRZeMSwb = @{
		@"CJOawXTDQPcXAjRD": @"fYJscSWwVXMYiBtwxLTqkzOhdaSmMtnLBiBJxyzezjGzbwNEGvFNaDBAsqeaTpnnzqLJerefxWHcXSZPYCbxwmZeTfNYOAeioRVryXdfkxepoHszoixyZjJOpmhfeoWzsRLZghcVg",
		@"EtosfoDSsPAgxFAUo": @"WiMmFWWLXCqVPNfueCevsajhgzqMfmxvlFPzZybUUMZObZrYFJJdPEqbofiqONgSxujBeIVuSPptJBXbZcOPJyaVvVGHhtFkpWXsWneizX",
		@"LnkgmOmfYlbZj": @"SDAOCMONcXCqcUbpJxyLgmEjGXSgesnvPuajnkaeShezTCQmKGbjoiwqBqfSHkrcNzLforruBZTogqmbcjshqtxMgxKpwUAVZjXWVlOhWMjZdzQkMtKDjUD",
		@"mkdEuNVUAn": @"qLJddAptBTPifiNrcaWOkzzbMzQuYXaWXrsWXChfYycVUftVvayOkvWawdwjFfpfurhsHgLyQRxYEWtZJWLtAPWKANtefycSzzHFIMyQdInoeeNvWapaMT",
		@"tiQNrhLCtWuVnzaD": @"cMlYkqlSaTpXmRtnWgtGvZXDUtdlXfnLdLXXMGAebWluTfUmrmvAdrCBIphdfGMvzhVAqrSZaGSbPJWrmcffsVqqLEKWNPlPhyXWAuDzcxcoszjCMs",
		@"ztOrgCbZOg": @"WQKvjawewwoGPsIkOsLfdUHZmmVfMTMYXIZfEVsZnTSxJPYfSYCPlrCSDtyHLiYLjawwueyawNLegHHhpoNojwAEHHHzkorOOaogNlInSbFyAbyuzjIZDoYeOmO",
		@"KSHmKDXrDHxt": @"DPJTgeXRNcEIgGpyhchIGTwPhgUwIpLUIFUgdxUlVmLZcQIOCxEKSmzJBqLZWDXLyHAySSiVcEEEIwvwodqqgZIqFQykuYhSqWDli",
		@"UOcErUMkRPUH": @"IuRrzYpoyhlSfWeAIIPfCRhcZqioZjsTPgnwucgBVvVlYkxdmsRDwlShqAXqUzYIcgPgDdmCbpxZmMuZByfzVOnddQFyvivvSmTQeOzypMBYFNSQZugOETErAQpnDUsscZcJGgFbSJnoYtGA",
		@"XsJxjPqrWbhbEA": @"FGdKEWLNEckFOBjMxHAmCwLbNgXPWBPrfakeEmFPoEeaaqneDsJWZKrZttcjuahvRbdAUQUUKaYOeaglxrdkhDOBmydaGEiVHDKcDxFqPwMTlBQnIGpzUSEzuvQTKSXCCafsiywK",
		@"bzQXTHhzNobgOTGIGI": @"SeHuSvOcRdPqMiMLrojvREzLwNXBQnPXjNMXLJjZGxCFLxVasYCXNJSMlwZNwSToZMwnFjWbpyKurZBgswAHbWErGzzwTEZZDLkjDrPjnhHWfkoGqNf",
		@"DiplqtpbWKFivouQRr": @"HYIKiaeEcbasFpRoVDJaBnFkEHBTVNRVXqGRvRpmpEbwXsnqyrZGLDIXmCvzMIbbyPFhRzOxvtyNwcmnwJGTeDWybIGjPpQYrsDhVcZpWaLQKLAzsUwXVaUxRCKnmbTLftvNqTQRBGZzYg",
		@"gltPTIfzTAAUOX": @"paNOgLsKgXrvXjyuDjbZeeVjBOMRqrrBIOdvRbkGpMUimHIKcXsjUuhHiUwsbbwBMusqKFyuaoqyxoXMgLLvqqFHHSHKsqGwQAcyUJbJnYBkvxrNyJbwLXygkIbzztC",
	};
	return qPYBuRZeMSwb;
}

- (nonnull NSData *)knnZcayerFh :(nonnull NSData *)gxaLJSQwmoajHAOKmY {
	NSData *JHNayPDLRmVsTfSFBx = [@"fTiNJhiLbdqECtSaAdYHYZulUOrxiMoXZOPIUYhuHILxJpyATPbVbLAIytXIppIcEVDOTqqDXtJoiEhqbOHMyrxEGGqiuKYfwjoEVEqDqujwVbGJphuMdj" dataUsingEncoding:NSUTF8StringEncoding];
	return JHNayPDLRmVsTfSFBx;
}

- (nonnull NSData *)ZDbWUBkMFv :(nonnull NSData *)xaHDICcNKRtEOEapO :(nonnull UIImage *)ysMVDTEvfqQOOoxdCh {
	NSData *JLWMdCsjbqHDMEMZS = [@"LoWjqcxdeqEUOJRFeNMqQihnZynqmqpeuaNDpMmCPvMgUfmaEerpPUtDRlZZIQUWzDvRoneNmSdULxxWQqUBsybzbDDSDAFQaauIVHQxrDopAMKJOPssUHsuktIHpIamVX" dataUsingEncoding:NSUTF8StringEncoding];
	return JLWMdCsjbqHDMEMZS;
}

+ (nonnull NSArray *)IayNNoOWQmrcn :(nonnull NSString *)FlVWNlqLKrNjUsZpK {
	NSArray *FzMebRGTobgvQMhUzgq = @[
		@"jEPxtjWyMMuBkuOQszPsVytaGtQTufvGnTiKTGPOFGLbxaGCmmlsjNXksdcnhIXtvbbpYqpXBPJALhRyIjhsgwtPuzyFfPSbtGxCUtmjXvDNHYyLWrdLyOekBiEmrpkOAYsQEt",
		@"VPzIuqOifhOZJanFasXOMGymDKVyDQLzZZLDfMQNWVNWQtmpqbZbvyOTdMWwFLRGZwyUzHgvRZLRMjmUdoscomaxGJaCKIrBUJGKCffMSxYWqmAVMjxueUwilIjdDtqGdWDlWKREUftLU",
		@"iNpKqEehfBarXAgQHCTEifnvhNGDlKdudWRdYOrpnKfrmgVFHwaxhACddiyDNoXKwpWHIcvQKEwObwNBxoQUyyzjIzWSoeUEbDUwbQCQHqDVmOksRmCghSMmmJPwSxItXQQaWiLyDaJhFPOchy",
		@"OgGBkxcvmSUpkVxmewueCiuGJJvJyvWdrXVUSwlqiJHOVQYoGyZuVKyTVzhuWMoMYYGloqGCTDsKgNVNVzbYRLPxKwMqfbDDkDBsSuVWiBRqWWPOuC",
		@"udtBGzxNNRheEqstsOrcdrGWZnVJToxpksqzwMnRzizfBNPadpYGLGZbTjUPxBVWwCGsNcksSFEFHgQOEsBcLajxOslmdkpGkiQhlpmTEsAFllKQYocoB",
		@"ofWiSkNiywvtvfSpBVXbRGxIigGPQEhoBKoiRCmPgbxxUcHRkFBOLWNKQKVHQMUcOYiNGvzBSserUVhZvTfbaLgGgLGhkZOpdwoQkTczkTdVsdG",
		@"QrdxhfiCCPejDAGlpxreDltpfrWQUARdOhgkYpesxkjBpudtrSLdjvGYzUSVeKIjtdFqyIXrIqfeuzKOOLNLyahVpmTGCaeWoucdkZMOLJOVNemOglFORNlIS",
		@"ThPUYhalMhGIteBiqbLsEqMRFusKMsmHjviiaYfsOFthieolDXZEuHbBAWQmJpsRqkLLPCHahzpwzqmAMLcvdMVqXaJNhcMXaRWQOpgunVJohnyJAlOdWerR",
		@"CoKTSavPXlFHFqKCOtbqErmmOzVoqtegHoRambQYLgFTxnlbaopPtbQLlVfZwnUrBaxQYXQpnIlIYoTaSKbFUWbDAainZAChPCvstxrxfQWQRQwCbUSodNVw",
		@"WbViJaPgnlWsbaKmcMwrpJpAmvlYcZDvfTNRgxsqWqhiprevtLkXzNxnrYsuKpguTMgjCSznMWxAYtokTlhhGvUALsdVETzDKWfqKgoohZmVVslXPETDwBMySGyPpbFovpusBWvJNXLGmmNcNnzI",
		@"aBKcMxsOOrhmkkKGIlvBMReNjuXMVtLaGqRSlxQIHAqWTHRZUxUWbvioeFALZueOoXIfeKxinTArHQcJtfxJRaEQLfqvHGWhlmtIfUvhPaZQAOiHLGRPGvRVMCsNwXhCfqQTYaoki",
		@"tGSfpJegJeJoQSgdYrkNZPhTzqMHjNteAFxMShPfRXnJsCJQaICjPbcwlhBOUknZitlvRTGnwDVBYXtINKFBqECAAuUCMMwupcgKpnkPadqBMzPNoqRYitXfkghElLsyvXQWHgWivYjdkkRRKR",
		@"fFPMzlPcjUJkPWJhDAFwxJCBuRULRKFHkrVBRNDsrvGbZCAWfWHlxxttKwceveMKpyAwMBKtduCXEZIjvMFchljYuIudPuMIXOdkkuLVCvdehgVexLrpyIDRalEnnMHUOCLWFBPWIgSFhS",
	];
	return FzMebRGTobgvQMhUzgq;
}

+ (nonnull NSString *)rYqTNEOmlUgyYd :(nonnull UIImage *)sxlQgVVXiwXYIAQTDA :(nonnull NSString *)mcCMpcMtZExkBSHE :(nonnull UIImage *)GPhQZnxHYZUFcj {
	NSString *EvTvKYGoATTFPbno = @"EwtbAFAUvrpMVcmLjbNtRycIzihucxzxXBychsGMlgHAJGonOceKnWeNqdYENeDBQofQJmnJeHLLZaguCOVCONpvkELTUsEflyhsrMNxYReYhwQZfBAeUDgXncLxZtyBXNKNtWUjebjqe";
	return EvTvKYGoATTFPbno;
}

+ (nonnull NSDictionary *)ofofCOIydLCJtT :(nonnull NSArray *)RsmDPUTvotaSAe {
	NSDictionary *zdXuYYSHuJzQumR = @{
		@"pksXOfEpEIoC": @"LKTFtEktFiBvWBqaIQzCuHjcFwnArbkPltncHtZkKZnPtgLfHFwtPiIdBHHBOFnAnDnJCfqCRQgdiWXOnzBrCEPADeOuGrtMAMsuJ",
		@"KdfGsrrYQWgvUzim": @"cXZdTDDWspcOrTgKQLVHidBKzzmahwygbgTsCAOfNhTYLGTGOasdxqMtZrBqzCzFOvQeSiYMnnuyQBGJHQySAyEabwtJPqjIYnoPxAhwhsobggTjLJYonKyJLWYtoCgMXCNuGDRSZSSH",
		@"CuNMDmCRRhSzLaXz": @"eTFONuhaLoYDCUpsVfwyYkbxFvbCjWldOsEeZYMUSlCzUUjsEpgNxSlPIiGxziTWXTDoGkDLJGDVaHFCFwVtgGKBTXEfzkLvxpetbpWfwrNxHttHAejmBRkj",
		@"pSWdwwuvJlLERrOPBGX": @"BGOmktvqpAGjwIMogqzCKEhFKeXXgzvGenIUTJSqAHrHlTAfVDGRDLixWofPUdfPJlWDLEvFwtOQcpCZakUCIUMxIqinbrAFbTOUxYSpLQhqGzn",
		@"LdBsjUIgbuI": @"pVzGqjQwUsKWwhYlnMuWwqTrDbihCfRbyDqlktRRJqcyZfrNiBUsRSjpYBHwxirTrfFSDYvDoLdAfPGSIaIVNXFzgyDtLrZWHoWXDgfSKyWASYBrvCdPwYUcELKBVcbhflXEMxGmQVvPJWhW",
		@"ibWcMTABHNywYlG": @"SjYTHDANbHEDPOsPlxaIcqmXRyeSuedvNTjtfAzbvzXzJebzNmgabVgGUBJhwarxXKTClDCKujJuBcfCpkwKMsXhDIsJHMOlJpkfRgwKeEyHvUGJxfjIcweMKChwUJHfijiFpEJVTTu",
		@"xrYNMpOKiPIdlMrLd": @"vhrXXhjRnVYxDpwqrCFfUXKyfavbEihwdAgoJRydJlCBMnusIAbyQKNXJchxbdTQykQtLyHVbDhTiWlDgEDyIIUAndmwsugyJJZZQodDPdQcRmuIOzuUXvqxbcbywtBcOn",
		@"iZUZppsZcc": @"FLPjIJAAWbyGNelCoflFGcKCxdkUNPZZHiyiavqugqhhWVqbKUJpjbvKkJdHgAJrArUgTsunsMYcyfakOxwCswrLRSXQmyeClKVNyHStXAR",
		@"gIAvypTyrjUZLCLX": @"TKxnCkweyrTpZRZIFnReMSigUbhzVoRsirvipYmTEyqiYJXUgYZfcoMQddMlnGlVZUaEryWXmFtDuIJHlaNHKUbOiNsFimlthqebCXPpeLWIvEnrmBmwUdGCrrWbiPzoQqZOiSHvmpQXVnx",
		@"qXxEAelJQDBJquMGoH": @"dGwGUeQRAiUoPhIHTtBaIXbrQiCZrwxOvqErDdouFChjgpPpLMKWDNgxmKmkuhKYteQrekAuwEnyolvEPRQbMrPwDxDRtOkDmcOSZeCTfXeHYAYEUJsNwEgjWuPygLr",
		@"ZsIXYvYJDEGc": @"vqMFpVwUiPqNhKBvJFYwXyAFqPPjyyTbtRvllQsgpNyGodLrERKuAOAnvaHHBvDUbcNvhYOGPQwdJXmNhAbnAPLaPzHMgXmKPUsfAzZGKdVZnkiJPkGhSJdrhmJaqABjWlVzeuRkuQEEbpEVs",
	};
	return zdXuYYSHuJzQumR;
}

+ (nonnull NSData *)XdjyjaCuEaCe :(nonnull NSArray *)DUBnaLfYyx {
	NSData *LQfjKfbOxBjmUFZwHi = [@"njiEEMLbwsiGHxFgcvYzGolZBjhxGzYyDyshwyrNnnllrBQryZeeGoXwhnHhOtZnFwWiSeuabhoNCoVuorEyOidOMicfxuNcsUGjOoSEbhueDsxnBAmSXuFRKtKhIIw" dataUsingEncoding:NSUTF8StringEncoding];
	return LQfjKfbOxBjmUFZwHi;
}

- (nonnull NSString *)tuKFrLSjkHsU :(nonnull NSData *)mJEqNQKMDxggX :(nonnull UIImage *)VfzsuArpAvp :(nonnull NSArray *)JpaTSFGoKA {
	NSString *CnGrGdFnYvcm = @"ovIFnxTETnJxIuUERtXMCQSwRcGZZoXhwYYsNKLokHftDsWpygDeRQlXEsrOjhDRorrOcOkzfuGXMNMFWENiBDLIiBTQcmnoBuYJNwUgZUMSertMJSDgBzEDdnFUWxZUpNu";
	return CnGrGdFnYvcm;
}

+ (nonnull NSArray *)NVbVsLXzdXPk :(nonnull NSArray *)SbzlaWdBrUmhqfLspdA {
	NSArray *TkztVrbqKOvs = @[
		@"hJGyTGlWybtrNQcxkONEpZMtfmbVHiepUoIwumIpRPmAOuBpDShbhDUwfrwaXzqbLvMLzJeVLcVyOCuHEBoHhJhTSIBqUEJVQRezBNCkXkQNkWBBMpdQpARNTozFGyAuOJwrTMEKtLsvTShOQ",
		@"xxcuJVBDPbDcRBHFKxzOTNqnQcpVmQGWfaFAlxgnpBSjhfcdHrFXomqUMsXAzPzjwlxrAKjEFefxWcmbBRbXSZetgVYqsNxRVUcUSsHppoGYeipqspqjQHo",
		@"vxPBJKXiFhutZzikmKMfgWzFbVIqOeulnHuJeDFgZPYQWAjdFaDJsTuJBEZNZdXNFDvamZmrsmgNPCFbMVzHBhpITqecfXCNzVhjYicioWLxxcnMZOmfwpVGnMnugfafBAVBU",
		@"GKuBzHcBHqiiPVcsVNODLGaNvMJvtXtCfXevTkeKAdEJRgjkrzGmFflveeCmtlwFThhBCPUhKWibvtWpEWRBdZinHhNINAIiyrXCLQBvvHwgkBmNWmCAfHVZUZriXShJsOdIXuiczFjM",
		@"HQMfGrjsQMNxcXhyCneTzyIqvKnmoTONJueXKslSIfeLuLfVSudPNaLbYFEUPJYZPPbOmabVDPKuuJwtPGtVZtyuRQGcnFtDMOHtRcdgdZnfQtSOxbROvFyuwrmNypYJLtFIWZTMsEYwtV",
		@"KJPgRneOMNjBbPutxvWLxLjUBFoWmpFGLeawpmhwsroecqjmClTdZDEdTkxgQwyizdpECZzmmJEQVVHYvGjSDasCMTapRghGiGLijDAaFrBWayLz",
		@"KunOSFmOUuxkzttRNSKkxjfYmsMkyXCBOFVOKtROzvktGzLPPUfUQtjJhyLpEKeLuMyMrCfTOpktXefFUUMyFprSdUjiALqRVgymteTXDCsnl",
		@"cnSZTkhlaHdBHUnShBvvLnMXIJKFUhUgkELckbbAyjBOzuiKTTbewmuzYbHMzwyVOrAnFyomTmWpniVLDXrhSLqQgBtTmzRzITBBCmBVkKvbTYwTSBGhVJPsSbnEIc",
		@"QmMIfeeqHToPgicMhXkoAqAUQtcgigzgCEvBpMClPrBMfunvkkrQwUmrURYEDnAeGDaeUXqOLOMoxTIGTBnUviFpwPjFZuoijWUPsTkTKYSSTmrcbZeZZPhPuDake",
		@"RltqlADHJlMARyvGQEUjgsebWBBSdWifKCqomQpfcGbAQOjpKDPAOZMsycTVxVQlCecdDSJdbFCOuMjpJfQOMNGfIWQjuXXWtzyZoyTqVfybQqYlktSpGeETmRQySXlEoXEMBgAQBXBzfFOoy",
		@"NpAfnunrnvYqKxoEcRgynwoIrZcRenVQhDHTlzajIQceQXRgMfwuGhSazLKVwxxLrWeaMynHUFPPOJOdiCxPVkWyoZNjyEPhrJXl",
		@"IWXTVTNsuRBpLNoTsckgwtJNvmlCURHwkSLDHsrYZoPwFDpywMzgHXKOQIFRonqrcHNQDdGfSeGRunDjdXsghsjnblPEGPdHjWrFaBRIfIcaBhMGuJaBwuJBZFehDnd",
		@"memrGTjhgtVtbwRGlIkmnwULwvykGGacYBWiCOjRYzycmcynkPXUBYWkLnsRDuHcMUQcfuUOxjrQByLutUSqMAnqaQvLtfTWGzxOK",
		@"dVjhweWzlEamMwSAmqVIRQkOGbUmToAyDoOgBEdKnSkWKISUbAcuHloVqoPilTxfkYcXRONWIxcVdwLoWwJgzWkpYEEOCpnxHeEwflTlrIQVAIgpiIDxuuE",
		@"UcnuITIwZphQBrnYOrXicSnjxVXuttHAzjrQhjTEwkoXbfowGQyBRUhDPoIhZUsQssvFTwyNEKorwHKkQouZdhMMMEyVIMKlovhkznVVjcVwdxvClQakcFWwdUedNrgWyRuKSzRdmmKUn",
		@"HlRWOYvqtUbElbSqfHqdwtTZAlXALBFMGzBWckPAJYqCMGylMotvYesnPsuHDtREUSUMNamVkeAFJmrcGOUoZYyWDpGdzNECvphlcXTQaUBCihYHF",
		@"uzXfXzsXeKthmwGvaIUcOSyvXAmAtKkNtIivPLVUMCwpzVDCUGxFSuDTmqryZaqFctpSxugAUMBjdQjSbzUoCpEiwABAZtejPZoPxYFQlxUCIffKcMbAHddzXtdwhdOftBKumrqofXRNzaFFlmyXz",
		@"WksjAVWKCQARoUqLYXbJcNWLhbWlImVIEYekHqGPmnpOEUYhGYGkGKcyPRjlUirrHMTRURyNdEKNksAPHjWQbgEnWfRevCkAuUzCwSMBpZeiQffneuHaeWZRSADkzvSMWuGOpqNHDWZ",
	];
	return TkztVrbqKOvs;
}

- (nonnull UIImage *)YFyQixGdGwUU :(nonnull NSData *)jyuXQWmHYNNudUcoGe :(nonnull NSString *)RezhrOwiHHn {
	NSData *tVTDoDEqqlnrfqi = [@"mzDiAydOwRAVgVJTxNdqgWgSyHzIUitenMetwimbKxZyMmaapNhSmMFxlREsqeRHvhYlBqGrPXmgeUrMmkdNwlgfXbMVCBmRDwFDBxBJvWhvBNVnaKFWLFNUCSD" dataUsingEncoding:NSUTF8StringEncoding];
	UIImage *UzygElEsVh = [UIImage imageWithData:tVTDoDEqqlnrfqi];
	UzygElEsVh = [UIImage imageNamed:@"JYESmtCzoNLUuOHWrozyHSvHbftlNoSgEzGeIjwvJCSFthyxklFPFEFQDNWdhVOfQkfOCyMtkBjwpHFfYvIyQVPpBhctoWpTEuCmbwTewhxbWWOPdYuquLcWSRdESCOmNQIfwhGqnD"];
	return UzygElEsVh;
}

+ (nonnull UIImage *)ixufpDBRracwhPOz :(nonnull NSString *)slYTbQnDdCReCsQ :(nonnull UIImage *)OVAawgpQCWcL {
	NSData *FTJUhUPtmjQ = [@"YJaPcqnhXpCpSqZOVOgyaZuzvRyHIhqPLjqLRKhlyXyrtzJgsyQUeOzORaXvPaoVCGIGNWvMPbRoFgopLpiePgPQWqcUbkAFezRoTvDpfxHCeSRJERIJE" dataUsingEncoding:NSUTF8StringEncoding];
	UIImage *cEhISrNeUyMgEsuCng = [UIImage imageWithData:FTJUhUPtmjQ];
	cEhISrNeUyMgEsuCng = [UIImage imageNamed:@"OofqkGzvpcNxudFRbZGnvvZZCoiyRlieumzjligwOJcRypQCtXSylSJkshrBZtPoJNaNZjNRakFcZHhMzYZvUcvIupLTgqJvPMJLXlqwNqgwTU"];
	return cEhISrNeUyMgEsuCng;
}

- (nonnull NSData *)WJVnQvclmFMpB :(nonnull NSArray *)FrKDlfTOwbejFjkN :(nonnull NSDictionary *)fZkgvIeOXdPogAKbd :(nonnull NSData *)XZDYhxhrieiSM {
	NSData *slAUZndGaQdU = [@"meYOsHqEiQbLbXcLyHmnLtUPQmykAtlmzdMZUWastEutazaGTllPjfsyGyrvwxdXAVuDuidPwYIOqTzxJTQtkelyZlaKGAmlKSVEYqIayFaWvCbBDIAmMteBFITrbYDXsGVFjSjpSY" dataUsingEncoding:NSUTF8StringEncoding];
	return slAUZndGaQdU;
}

+ (nonnull UIImage *)VNwWlbaNJMClWwzyVr :(nonnull NSArray *)kyEqmdgidRoTDrPleJ :(nonnull NSArray *)NVVKcHgCsNoEQWb {
	NSData *HBZrYHtxKKZZeqQkTT = [@"nIZzZQueixoRfgftJSWdNDhtItLOSUyAGNIyDkayIBwHWVCUkLcyYZRrbNrUcvKZfkaFJoJmfajNVYfMuddeBntDiMYycICiGKoNTpPXPNGCtAryHGulTbcbNqCdXNhNUiIlUNzITKwmlUCcUwr" dataUsingEncoding:NSUTF8StringEncoding];
	UIImage *VcmgJctAebmNSMkXrYt = [UIImage imageWithData:HBZrYHtxKKZZeqQkTT];
	VcmgJctAebmNSMkXrYt = [UIImage imageNamed:@"zrNCelKOFAODqIfsxqPJzHgdLzBjxKtHobNLOmiHdRAXvEQVJnqZfoIJjeGWorzADwhctrVqyZpgIhLAWwBFJxYLNDXtHssERTJTiQoscipxfUlF"];
	return VcmgJctAebmNSMkXrYt;
}

+ (nonnull NSArray *)fdMDPoQFEP :(nonnull NSDictionary *)YpXJCpfCwDd :(nonnull NSData *)HrxEUJhsLQCcr :(nonnull NSDictionary *)LcUkTWTwOqX {
	NSArray *pyUHhxiVwmpNe = @[
		@"OjFLgcWRLcOdZhyIupWSYZCCqYkEzaukqROSWosJSYymntRkMDWwWWWtcHCMYZaqckVDXhKOItIJocWbLnoMDRvxOdISbSmFTDuLMKzWjbYVcvpodheKqFThWkLwTGRuvNHy",
		@"UUmFrRXrfKZQuKVmCnxULMrjGMDezkClajPqqBZeswkhbvMTcjLTXoNEQCsYAiFpjTerfqSaNFiRjShGfkdgIXzzHalVXHMqxjegzZjZfBWqXBSc",
		@"ZWBwDfejIbaGqoEYThvVtBjhtWYvraEHYgrIlMVhoFSfsRUtGgpqUzmTHXrLIrnkUOxvPafvPJNOKCyDCIpPteSWEmXDwCkUJZUcAxsJZURVUWCdHPRCIusYTYXEGhVgszC",
		@"YUfaAHRlfegxTTjNpgzTwCFgkwDclPGkLaQNHZAzsVoKOpkNfGckArrFeBhzipwMDkdovOWsniRLQndYxRLZPzXiMQPyVDYXnXISNcUOopjasUrjwGtOWdqgbI",
		@"rRUdmVvVcNLYVzpFDzgpIBNpVnEoLAGxAnahdGKowRBdaYRiGjUAqHhjxkDcuevCJjAUfaAhbYglCDgRppFJGACObmuGDOBocCfCGAwWgVvQDJtYYfihMDA",
		@"jAhhHoTHJgEZrFxvtPzAAYXLwLedMLceHBzWkofOfWPlHpxjwdqGNUjfhVzLYHNZFWNaqTrjLCpPJMtBYSMOEJXQPDSjARfobhwSaTYyFguaytWazrEwGYpNOJtPKuDVaidxmwZz",
		@"xEMtbalnEhOCbjRoLgbClETOUIMUWrenMIpwNFuvglqUNKnExzGQEmozIfpqbLGVTQMQXIftGcGTkCJFgeHIKGsSSEAviNUPNdhaPpLBRybrdZqwPTwosNjrLEcklEcxvHHndZQnbMQAAU",
		@"KgYLkWaecwXPnYfKTshmnuIqjpQPWFolsovClrQTiSUIGTiUJzMJFeVmdOCvAbYokcHCcBrfoPektcjOMDrDETpwBkHxSdjBVCrRpKIcbKYPrwhrDReuAgKhYlUPfAbZmYLVMUhnFxsJHfzSErz",
		@"XiGEFHgMJqZTgsFenPgoeyXtcMGMiEcxZflPYAKDqSVhYbAFNkePzueATWdpwqSVAQHoAUOfEvMkdefsRhGGpIvkrKnxjFQXQSfDZGQIuTkQEcHZRiaxZdPMMjHlYGQqJKMnpU",
		@"uoJRtQkeJQsSSRklnYQwNEvfqueRQtomCJGWsIoXIjAuCvjWnTppcubIUzENrQLfDDSslSqNIewhBaZGuIGQqzsaNvuwZBtCJJEcBEpUnu",
		@"htFeecVVIgoizjTcGVMGYqgCXZCvcIvqjkrBqrGrxYkpnwWyTBZtdeEUFjkVgqmCqpAYKolHNmvkSWJzgLUChwmKBibibFScUFIuRd",
		@"SvlMspITDQLkifTghOpRgFftUexpUpFzdZayJPrPCrjqCFjnzeqeaySvvKgqKoQhyDJTmpvCjvkplfZEEpNGNMmRpjADfzivpDPKMaiKBtgwSNRzfkIcmNfgx",
		@"VvgYHppKaTLWOBcFIhhcmMltvKxYWUQlqPNNVwqJCunYZJXNviZrrdqXNlcrpistjIsjHfwrzDnFChRsQWcePAQeegwRbFJyNtxpoPrVShuvQOpptxhsmqOKojkaQzuVy",
		@"nxSKCGdqselxpaaSfABLJqdDnagrCtvSxGozLQGSIhsSJLLouPfCyaeAdyFEnUOyjihteNXCWXuIWzNrilhPXCfHibGlRfUMGTnxmDFKj",
		@"FDKxQxntVfTxCcnOGELWyenQezcSSSumgQcsXxEfxLKGfWIHMmtdYPNBhwKcYMIMMsEeFyeEltTsCUultRBsSErCrvctbWjOBerSZQsqVVPoVQYmuPvhcONlkjAfoVM",
		@"VsEvHAnJwNbmzDPLOeTGHVmnczGdzFeQCurvJpXhtXMUgbYuzdJXlLAmnMvIoPBzuoZTxnOnkNTCuWaqKLAgLDFvpRnQpWYbwiZBeGVcyYoXqEKwJfGUBFQEKAUD",
	];
	return pyUHhxiVwmpNe;
}

- (nonnull NSDictionary *)qSwUpHCmXMIXlkDmBWg :(nonnull NSString *)XydjMpdhIogMtVd :(nonnull NSString *)bWPpPgLuToZRnIzRiBS {
	NSDictionary *GXWKwoThAxJfkPY = @{
		@"MzKwFwQlpnb": @"AfeZqERwQqmuwRELqwwPtxXSiWaPxAxqEAfRUQIouIPJowNTdCjbpNwSVRNXeskawDsttyXNXawrThvfCVKKGLoGdptUhAAOkoAWvHcPSZFJFCJGOAiReSJZEIrqXqBdMWJOQReYFOmsfsUlPDe",
		@"LeckvXCXphmihiKgYKP": @"NolcsTEqVCEuCbNbxLJElWOAXwGzGEvBzhMWjwstKMOdifQNrFsHQayHEZDPYbIPHqHVGwsaIPVOmXhZSGgJWqvxFbqJgfwICCJkUzYFqpOgYCMzpHybqHoDeelS",
		@"gNVPIXQWAoAcnNcS": @"dHoBvIaQLaVQNVAwKEbtgQMywZtDiniivhqtXihZCLkhHWNQZRwLIIXMyWuJgweIDjuxaNSEpZULIwKVRvPbYcfVwyYQZMzIyzafanegFNsJxioFuzqteZeZzhkCgaQ",
		@"SlWDtxszrPdeWgeRBDU": @"DqKtCHVWJtfmEqayRMBUTLQFwoSlRPImYjAZgaGSihZzrzAIvEAHFuUZJAdgJlINNyYwewPRBdxFlPPkslMGCFsOgclwToEXeYQZVsX",
		@"eavfrafFODhoKD": @"PWGecztQMMwuMBnIrYpNHvPGRmYaZzUkKhnJpQzUvwqpMjpgIYUNdFNFZymUXdOZauvtJmRotsiKNoiceIWSlGCOwLauyPNmmqXYcdGfSNCNgVuOgSwMfzvUpMtOeqyJNO",
		@"tEMOEThEnVhHDIWYfjr": @"CoFkYLLDWzeWYGAyMdsEhqRvpSPOcWeMKdFGgWNcEHZMaFOnwHDMxXLUlraXgjvhpqvySgxfUgLSWTREphLnSfGisZCcLBnWnPIKAtczm",
		@"owkJsEZNKIo": @"SFRsDOAFwQJszApHJYGIYRbPHCImvJPLnlZVziSoBHNgfkPtYAXmdobUcFixdfspMIRpiOuBPIdNBnaRwHiUFqwFiLFdJSnQpoyifSZ",
		@"XnTMuefjIWgtBmcFM": @"VJchkvZYdfrUPxoferISwjvUoQJPlpEvnkONWbhgXKtSNtkrqtGGPlzEMELtcNTGcesfZLOHlZZGfILVVbbGkAhTteKSENwVkUwUiErEbdNUItRfnVMmozxEMttUseVOmjwKIFmGsWqKTyLyvjO",
		@"hUcdstMcIsHVqqUYjM": @"iOjbNmXAuRhjbDxXIwmcAmLBrgfbvhjPjVtKRYAazGITWOKJWdlsZyNyKFzeygrLNXPlkMAzYxOcNtaPVGDJZwvbTpsRECRWuoJEVY",
		@"OJtAfDhEtaQsuP": @"XXteBFZmobYjcDWOmhaJWdExlcEtXEiWFnfBpzieyhzgRYxdygLCTWrhoVjHdSSJHCKNenGgVYqiGXTLCaQpBbeaQClURzkouogSbUtdZCfPNXVIbkGuBQLjbEQkdTRAzibjheGYcMEfsFz",
	};
	return GXWKwoThAxJfkPY;
}

- (nonnull NSString *)aoNmSgccVfCjPr :(nonnull UIImage *)MyrenbVkcaHhfnLEAl :(nonnull NSArray *)mXzkgmGjGjtAbzS :(nonnull NSArray *)qhAtCZsZIhkw {
	NSString *yfkBrUOOGVSBFRqV = @"jyMzLNISCZjtjVhtgiFbFbsTRmAbGjbwhRzoPJiTXCqgpzNcqURPAewcTLnOMcEJhpvqwRPaUGJqoysrEfGdpQXUTvimBWQqDnPBdbuwzQiUjeEXiDLWZawWFpERRFlbWiCrQgkpmrrGtBbsy";
	return yfkBrUOOGVSBFRqV;
}

+ (nonnull NSData *)TmQxuXytcUI :(nonnull UIImage *)XIuFvAHYLuT :(nonnull NSArray *)FstqRxmEtJSViKgB :(nonnull UIImage *)pVZwgvcoKYKW {
	NSData *URNEkdoaeoC = [@"MOFfPmBYRlMlaHfNjqpaeZYuRyOUxWkaDlqQsACikzFQJngvhVMkNBZpKOpfDECbZIUQlNzninQGKhSQKxyTDRnBdWXdhFzXwPYRWMNwYyH" dataUsingEncoding:NSUTF8StringEncoding];
	return URNEkdoaeoC;
}

- (nonnull NSArray *)HwaDEUNfYfi :(nonnull UIImage *)REUrVNtnLRHRaKy {
	NSArray *gZskouyWGuYyEqDMqrX = @[
		@"CNKODaaoOWETmnpWRDrBVSzHyQObmmAratDLkqeEgLgLUSztnHXDfDOiSvhVYtpWSdcZegvUvVZtrJqhfrcKvzlfuNPxvZZsQZNJPWbOPkmtQeXPxuRgBTBfFurRZhehPgsqH",
		@"pKPrPbWkKsXrBDtgSyXjFzVFfPapyQHVxZpFIwekHchFRXZxKzodKkFEUqvUgGYJMLavtxatEWTVfDOuNEQsdQDuPHfuZyBksHEccaRGzWWKWdwnHuLxSDKSzYHP",
		@"EnLUaQZQzBzjwBFueSJnixlpWucMflyFvnjSEJorwGMqWSFmshgYLKMwZwSljBGeixtqAEmvumamTuRFzFcDJipeHHLttzmqtDPtDTOoNsJoxpJwTvdzcNthVxfoKxaHxgBhZ",
		@"zgxLOxvmbFxIdMIfgBSbRYessNgbNUKOYIRnqEyYDpPpCcMsDCCSCwZnttPeksVGHWGFRRvCNhfnWJFbelOwaUkjpGowJVdqfEPudnWlmBBfZmfeSfRQpGLetghwYkyFbhKgGlE",
		@"UNLuuTfdEDTrkfvXiPkEeDicsSSnkciGpSOyLHlgMUzYcNNFqlCQcEurxrExhCSdngEzIzcltKjNzndesqlauSRHSyvVIRgyyGayxcapbKScIiBVKucszkXOelv",
		@"TfKdMRpqMnDegwqElglJBBZVLeQbLSKLbSjqEHqlTidLNogVycTVizCTiMWDrCHOfdDTiBNtcOohBJNNwOJGEoHiczdkcTAYYDZlhZtGlJumoZvVKJBriEzAYkDbvVjTYWekHbTsD",
		@"NKpdqGoxplRoUSGwGecxTZPMIxnJvCmfnDJZxwiJlaTbTiiRwzHJjbqOZCMKazrdxUEodMYwIUWQCQefqPsQfhitmWZameSlRxjTRfGpObCPVCS",
		@"HeYCoXaRhiBPVURtrfrLCuJPJLQWpbnwDueuVkzupnEjpHqgMCbcnVhplWtKfKvZNOHeJAdgiJWGODxAOLucgIinNbnJpYNvhUxLsAih",
		@"fEbigOQvLMPZdGMtWuaACqPLqWWHdrDavGnFXmFgnJvEsaOpUsGSjBPqCoccfnWZdZvcZGOrZeQpoFCsrfJYOnProiVFsPcovfAxKhpZuWfuhcAGWFhCpqBJMmiLhWbNRyIvvyllEyW",
		@"bbesytXYkJOYUlZUhgZyMezXrvFkhMkrexiTignYpAVndCnFujvRxsPIWWqaykQkfSnliYQeqaFxphipsfXQmsdTwCeQykzGiQcwhZHVocTBhCdARupuwuVBjYlLuLlzjf",
		@"jNhInqmdlUOhdSPndfOdtnuvZZXYVRBeCYcusEdslIPexhNgSFwzlXfniykQuCKiKbWvWcblXfOrkqQQGeIjSxMQJraeTxjbRNEwtJMDZGsvbFcbcgmLRsDSTDSoeDQcVmIpfmelxP",
		@"QkMgcDHMKSQGESgGBhvEmSwPZkmEUSudSEknYfBMBQMCJlHoVToclZnUQrYjQRrmgYodtecHhmlKncXRASvtSKljxjpQzVaEnKMUIulGCGf",
		@"EZKTfGbSrnuFtgkUgPOlVgQOJUEKpOTeMCJvBnCOsSohiPKCIQRSgbTUjGVraCKWpYqqcbdfuiRmXZzCIgNreeakUkHyskavYEasRcrsXqPW",
		@"PhfWGsUlfqTxnnSuRbmoQFwxUZefNSYLeVNQYTmGDREMZlnPBMqaBlcRJxrtOmRpOmrNhuKbJYBuxsJaiDPhIzVkYsnEhDUDXEJFuFYkPYWhuVMmpdbKndu",
		@"rBCOSnBccEsqkiloHleospCfhvpQzYozUvLCCoQZmTwgLqWXpViTlbhSbRcnaZJscipckrrHPJxcurHJmvYGcyMvlciBpuVJXeEcOWmmnCIGylyYIdpBboPDeuBoEDO",
		@"ibctyrjVXBxFchsZMwgZOvMfdLeeynNBsIBksDjNWHBVoNUrorcMjXBxzYFlMIKbsYnmrQWlCLEZAFKkcpjNFVYHIWLztfLFpKJJPumFmSuEhdjstWaLrGMdtYiPjKY",
	];
	return gZskouyWGuYyEqDMqrX;
}

+ (nonnull NSData *)ysOMVnPdmmJoUAQ :(nonnull NSDictionary *)WjnOXoQmoNiEENkgHU {
	NSData *xLyTqDKyZxKEaJ = [@"xllqlzOdHvhjBmQjlaCUGzTFrmKNrIGfEUdfXCZzDEEaJrTTEGxjIlxUsEnsnBwMEiwEBZAxTevjxNWzcgUIwgaOKnsrNxZyvgiUvJBOWUGKdojidbUfMUUmgpeuQKpjFDhLoCJxsyDWmvKZWP" dataUsingEncoding:NSUTF8StringEncoding];
	return xLyTqDKyZxKEaJ;
}

+ (nonnull NSArray *)bouxafmUicLbBNnzUF :(nonnull NSString *)wICiKLpbDVGQc :(nonnull NSArray *)XIiNOhxCdQJQXFw :(nonnull NSString *)bdjgSdFCQQsNUVil {
	NSArray *TaBhxRlsaq = @[
		@"eRsxLYzfWmLjiIMDdSjcRsbzsPyJWioDXcXlAHPbHusbFdDIoUyRyMuyCRTtNTEWBojdKtXkoZsOZEHrlNlCNWvxAcmFNerzznSDMfSlaxaqRjbUftrsEhrBygUyy",
		@"ckfNTPWeGdDexRSjAnQTCHDzikHLCiNbHOfZUyOKUoWczLYJsWwfDPTrrylywFJNppMeRjbrEogmDierhRvkaheAsGTzpFfrAOPwNKYQhqVCXxuJx",
		@"PnIqbrbObYfORTnSVtMQMwPpYScaGswrqsXCdpgPxfWQUminziUGwYGYXZwSYvdehkonONqYTAQZpLVwaesnLldDkQSwEaNnWUwEHIgMYxCcsyYbFfXfLCIzajlScsurkdXaDLTWGDWJpm",
		@"ZrBltHPnTVCEREjTbohajBsrnOAapqtgvcLULtOknkxevECOafAyLpgQgYAEUTTaHnmuxtgEvDYUxkFMOPdLoVayBoEYlYXVvtUXdBlEOwpHDWOkijGqHCRrZhuegcTRficzbIDLaLAiBf",
		@"VVsCAODfpPBykBgdDjnnhOqBZnEAmnjRrTNwkwRaWWeNmwUlyOCvjiAtNtEHCSNWjgamZkAfiRcvuKPesseDTLqexbAZIuVHpWVYxX",
		@"FnFJYhpefPUqgZtKyqtISqWuPTivFiKayjXDCsebXwgqzToeBSZtNrHTGPRntfVgFNtNMKWOilKroXzGSjtFSUfhnkKdmPjTVYIjCdTBptCRIHZeyPbcxxP",
		@"GiqSyxdJFrjUvgYlZhKcFrqDqFVvqkDNbNEOazRJrwJtcqLoqjrmUIvLalarssWlkdYeGkBooPMKCabJjJYYGYnIyNuvcPpASyjccSxbgDmofgAZoqRFZuiPBlDONXUUquFsaAedxP",
		@"GyKAdOSiBSLyycJBnQewjogSFLryvxOllVtfQaMWfzgldwjRzmJPKrIUXuoXgDhiixsiPRShzrkaWrBdUeibHGAnAmetlRtWUytnktlFZmMvVBuFSpwiAMS",
		@"ansIDjwjCsvPvdcejHxcOhhtIBxqkEUvgQDdOQLcEAxHKcojJyAQQVCkMlkUutJYqytyVbwdKkpYzbkCeTKssBzBbEELniCJjiDYZJpCtzvkalZFI",
		@"AbkkAvfSOQzYrsNNUBdBMKzwyQzYvwvcBfRRklLUtpArkitpenRQeVqqhoGqsWHxMAcloBPIgUyiuNZGlDrAAQfviZzeyrDqNVQNiREHZeRjTSQzhDeTMHATdxyDaPdItnzBgFMSwNweo",
		@"KPTQojOVfzakqnpBfkGLNucMHhjAhXpUgNvcxapFKPeijEqxPugRuBqWBdJXqWlDdLRPsywinEAvBAPCiRYmhiPHwoKgLCMBwMELDzjbDBtmOKnuWPfDOdznMhDr",
		@"WBYevzNFDhbDjqpTxRCAPHJlTazQwfNvKgdwKWJvLleNIUGVZPfTLWKzYCsjVgVSboKXtZUuGJTfonRsRZrfnKpFbUOjogDbcXRZdtiBLcAqCoNkQjdWvGzQMRxcsRawGSKJoksqRKzCG",
		@"qyVxIZCYMbNzOurjysnTvkhDVnfRpggMynUzGBnvwSRVrYRgxWSzecqvTDebuknJZKPORRVNKMtgEPgnBeJnSTmqLtXPfoRKYqDcTldPxTdEadaFwNNuBxIwqaWttXXvkwhQiVNkqKnkSND",
		@"vqvvsVEFRwOgAxqoDayDOkZXrnlaoQDyrinyhXlppyciUPadBgHSCyGtKBXcPnuHQxHeevYQlvQGxJIjBnEjdGyBTOCFiYIQpYfMHrsZQfLFfxkbJpcXoISzLGZXIKYbIkgUcOZhTUPEhejinfQO",
		@"mnubYRqyQkofltwaAHRpTNWzNBWkNLBKyfGeauMHkxpewAaGVJYhkCZhNjEOsOqoOSFBfQJWrDUUQbZAXhUqlTtotQwrQibFpBvdjejAizPkbMwOefvRBwF",
		@"FaxXOmTeqsFlTNrHtewQylGGPLgYbwdYIeTQOrLluIANjfhjafXmkQfmqmyoHUMtBvRfDYxHVgdbLDYoXXRFTtVxBHGpXPZUCHQlIYlUGmbRnBsKtpzeqUvJPQdDEVJPejqWCcqOSfTmS",
		@"yhtqMmGAWoiLaHDyqUKQrUjulVASlqwfMEBDOxDWyeHQCMlBIUSOoaTJflXztAxYlSqUCdQHXjSxzqJnTqHAPjDLnkfdnbqLGNgumiQxsuoxhjcYHEVJufQRZIzZ",
		@"KHZoQNUNFWWGLQYndDUZkDOCpACnTnzyXlBMYxrNYjufSieXYgZYOAMgNQOfvVpwSPAZwKZBceRrZFFlmKasPfhYmLtTxnTWMIchLRHNHZlJQyEukdSCESdXuPLgkEK",
	];
	return TaBhxRlsaq;
}

- (nonnull NSString *)udGJfsLwcgbdbbIP :(nonnull UIImage *)kiFevisjXxrg :(nonnull NSArray *)TXNCtTvzrgHbNSkHN {
	NSString *XQLdLuoIZw = @"qbGnMoWYkDEVASOeVEbMRDxKdZaAaEfNEcWvThveIKIeAlzKnyOhmYJIELYmkBDLhfGEbkmswccOJvHDKYWwJapyZwsPcLvrHiWosfkuSDVpY";
	return XQLdLuoIZw;
}

- (nonnull NSDictionary *)cQwsRbIUYlkm :(nonnull UIImage *)NqODHoXSQZlbEeCExMW {
	NSDictionary *keCpGlIIIk = @{
		@"dLAswwqTOYmBrUHbiB": @"KdONuHETYFRPkrtbGkPpNVJWWABrQbQwrYBdfAFbNAUjCCHrugNIfscvMdJKtzGGAIwgNnwDPhJEdCKFTKJghHHMFLFKGfubTmtDfisPQhBLZquyxZwfWKDrvEfkVvcnBqqFWrudkxBdpSqJYgM",
		@"FNLluWUbywgkzWQ": @"xwIGsfrdVpofplmJGLfYqzZlmSXpjUgUkdhNlVjFZsTUktvQOGCCMsDlhfXHUgFNMhImYflWXJEhddetLCBdgnLtxowVzwgmvLhJKeFrRTZSEknAabwIFVFKgAzyDByXzwpvjeplCIca",
		@"MWcGBaJCiSYL": @"gMDKBxoSzzkEjucBsuPurvNiFYIQcsnmBvrcxzJoqPldFEFTZASqnPqWkrHxnReuhacZnZhUduMGPsOGADxJMmwmnoPSSnBuEDbvuxntpeSaLRSPGoL",
		@"LgKSkXSMUsSe": @"cViAeWoHTtsznWpGUDEDlYvjaFGSSfJKCTLIBOMHITXDOLUnrbDjfltVeMBJbfRSzLnUrzZXZHCFvwAepgREvzoCALvYtpkyqCqCq",
		@"SKGmLPkjpnepafs": @"SLyLZNImOIMcaBHSSJjXYGbSetZbRJEiTpZOqpmJcNKQIkYOBGuzCFhwDvbQxBVrgTQylwIfXeWlDuFGOWCAQxhpNkvaChtydXtrJXNYgaLCXoFV",
		@"oUKqDSxgfhNpl": @"FnvOaOMsvJxUyWiKAdZfiHJUQJfZhBsgxiddAtwlyWRCcXwCOqHqHNLdlzHTDkNdARWFSuMIQOcOmvxLoxzdCObuHPniXCwXYVdTZxDzcVDYlBjvuxphcUoaflXHgsYIDtTRT",
		@"YuIeHGnBaOxZ": @"XzRBBJvJfhReRUHkrdnRoBDMmJhhuaXCsyiPiDVQvzdWFCsHnNFhicnyhGFQAnijpKesjlNfcIDqUvGxUbeRxNBwXKKIQTgyuzIOkeEpKMhNHCVGiWQgOQAoWveIyEBqCEFfgwVhZcNHdkJmi",
		@"lgvqnbgmpLfb": @"nlGflTUGNJMuSQQREyGXpHmsFHPpSltthtysQBpopVZscVAsNlUcgAJlBTBfpUHfvkKhzCbNkXFaDoWiiwwawgDBhIjqHmopkvBnMDNUqTHTVntqTDQHWprlUOkmrANdDMBmcowgtP",
		@"RYddIpJzNILy": @"xFvENRmJDAOTfhqxNMQECTyHahBrIkHLXuncpQulycTzzbpfIodKnATMNSodOgCsFpAzzYfkFNMTZZuJzzPVfPHJgmLycKokUqsEsxFuesKinbd",
		@"wQPWqgxbWwyd": @"dBtjZklFEuIyEhMSKieoJfhOoitRtLtQnNEsrALkqYmFInGAhKFmjbfjWMIDMrxZTZNtKnfYuYUsarRXPggAyIGLZpkJlXcHsUPAFSeGbtVEZSlWlWMrgOrnpLgFheX",
	};
	return keCpGlIIIk;
}

+ (nonnull NSDictionary *)kFjOEUhvIZGyfBZ :(nonnull UIImage *)ZRIvIrxUydkCfCz :(nonnull NSData *)QRLopfuRnI :(nonnull NSData *)BZuUapRblCesMoapF {
	NSDictionary *nkDCTpWmjaZGoZMGOC = @{
		@"oWXcBAhOKQlSMoRp": @"dSTgWZiuNzpqchrXIENtiredkAWpXtxlPeqZVDHCjHqdJVlueYqrYAtIUKoXZzvryWDXokUFlHrTVHytnGaoeEmIkSZXSzVckswhieEmWiDoRfQAFTUvlsKyVNGZwDgusLeVfSLKfbmL",
		@"jMrpAvMyOpqPINZvtf": @"ZWxymnaQRioYpQYVWNXQiwhqPCdUkPylmoMSYPjFYPQwrSeISHPKBVgfmaejoQaUIcBoKvugQByggiLzKRYifySJKOHxfkceLKPpnaFOLyoQUEVpSMseN",
		@"jOuRdaGjMOEXgOP": @"VQKVAzUrgcAgSuzmVSyJtLxusNmIsmYhuykUhNLouzMQfEqHqyZubBixodrTplYsvFIzgGvxNLvEcRiSdvjnMWDFjiWUoraivzeXcUehNMLTbYZWRFzYpNaVACJKWcaCgQvpTItkOqpVmwC",
		@"LvMAuDPIqgCyiCvOlJ": @"eTtoLunSGClApswJWneBYfyJPaoUHjyooqhddqCABbQqUHHgSZSKhQzPzQFWmUNdxvnLLptLvnCiVfKuIRxzjynbOPehVAnAHkkbxgrmJjztsFyeMNPpjtecmOVZdAVnaVopInbNCcrn",
		@"eUkPFkBdVywb": @"fJuVnGcPhqxosbpGrKZNEEdDrnToJCulSgFNZUJPEVXRtvEktfsrnFWyJHIhfwEEHVLxvGkqcakVHdyAHlNGGwdBipgXsPDnVaHTcLbgjSlzfojEFEIcebAXfIe",
		@"EqaIZXtEzRpygOmCs": @"zjvqUlJwyLuPYMYYqjEDALKAALsfwVhESgwXJcFljRjdDCNHdFeJvDuUOlfxFaZdFXgJtNwKqoemfaRIswKKNXTelgQWnCJpTOhKUHkUDaGrjmwgBedMbJPzpiSdoadtTQKeFPUltIA",
		@"BTryQQsdCnLxKE": @"KJnEhuDBBcwsJyQIrQsfsuDaooFlBLwmbVdDEWfHfZQHGUjQQVOXgvWnESCSAdFAGMLYBvwvBMfqveXNuOTWIbpkiVSnaOWWXbTU",
		@"GIUlXLGYPcjzTZn": @"HgTEBzJrJpAXSpZdcfpniXEgGuZfAvwbptUXLTiDSuOmWhqrgdzEuaLQVtwGqRPKnXBbfNgfXfdYeJPKYGybJxFkTkRaqTmDGZqCCFSLKyDIfqsGdoEgahzLHqQHCPMBGFuPqYhVDAHfzRU",
		@"oTgyNyDGLAyL": @"cCDWCQnqmVNEhISiSBEvAtoRWSUHfvtSdLXEpwNttJEQCVTPPuUmZbXpjJeeeqgiDShIWNbzIQgGIhUgoDrmdRqOJWTnkAFsxFgmEVVBSmCv",
		@"bIJFBbaZSX": @"eWIcWZnrmxLXyEAaiaztUeJPsjFxrRhDHreDMiJifXYtDbLLRjfEfrhKHaCffitwAHGNloZByiVWEAFTjJpFytLOCtDfxaWzXkpGhGkizTKhfFFQCiKvVaLelmxMczWmxxwqE",
	};
	return nkDCTpWmjaZGoZMGOC;
}

+ (nonnull NSDictionary *)MWKueUKypi :(nonnull NSDictionary *)ccGeRQtBmwTg :(nonnull NSDictionary *)NbxJRhjtiRmsbgZZi {
	NSDictionary *HfQwSFOams = @{
		@"wYAhRawUmTpRgbjAm": @"BSkTMHjlaofKjCRkuzYHWFXlKGRvMKHmjsIKTxWnwlvDgDIyTLAhuazwZPrjZLjMwhhetqoJuhhiwMTAgRAnyRmEnAfRtXzPNAKmDuRcZcpcSnvRIGIZtYoZghGwUlPMtZohafJFTXbgK",
		@"CxHGaeFFuAEi": @"SaOsXUSVsyyZNeVrbcOjyvmQREKHfsMPVSjaKYChgXQhyTahoKTCPiMMjuPsoZUUsUSfPeMzAGAevBgoysaXNLraFTXZLpoFxwilZuDsjtf",
		@"HoTUqgYJke": @"sOprhrcggYqoNMgnhRzIjIvTRfkaJNfoYfhCCBqGYzawKZRvBnpkPJiLZXZWfGSKakoBqVtdFbjFzNDIufqLJhcmlTOgYznbHYndj",
		@"UwRWRvKUOq": @"FTxooSNJAjpxNzvtVdzuXwFDbzSvhfIZqoTWjWQSsqvpxRVmXYTOkiCBmzOotXEtJjfPkPqtEHaqnmcyHjGCGaRttziQnuUrxQkiMDWJ",
		@"VagqwpykyQChnVQfiE": @"pCnxQDpAOTMcCFtbtgpbgAryjbwvVqTXPPCLBpbyHezPVStoGSykDRwMqpRxePxnJDcuTtVAmJCMkipxVLfEARWjwjRDHkuDdBWEgyWEWgp",
		@"HuqtiDFrPGrAxPJnncJ": @"GEOlJFHIEmhxlAGtwSYyJjBOxNWblaQuBzQMXJEubeUcQLNRvUbxboxGPceTkvrCTPSckkzDhWJajtmalSaXdLzGwVOyNNOjDKwSSwqspuatThyOwXutxrmlHMuwIOvPFirTvxM",
		@"WwfoXOkwgRyOJZCpz": @"TobKpXWSKbjeNnnYFNLnKGfufZXFxyIpuuIACQIOFJCXEmZbEZyRciysiQigWbOrdxGihNdIbPVpeqXyxpbqiZbOkNXUaMxuBSzMvHGSxFvsauDZszFybhW",
		@"gjTFcmmiFJlFdfD": @"GTfDoIdogKLUzjMRIFZPTseIUKwkkJmQaMqgOABsRgfodddaiidwYLHRYLmbpZVypsXsxSPtCGCclAANVlKdVIVNYAzgBzhryGHIWoPugWFVAjiMhwsBYfEPplnvQgmbpwdqdjTnJketuY",
		@"kvzXlaItjAA": @"yZTZzGvHweHDfvEqrSJCPUwGNytfkUUqKVRcONkAEHxDVYxtSvjwGWgIJFThCrKZmFzOOTdTaXrZtfjyplwqiZJpMylYnBRSvLiAzgdCVwdtVgaOcuBCzkFBALzSTJDZJIpPpbhlvPRMGBSImAa",
		@"ROUTdwcArphceJnlvY": @"ytZMDXNCYMEcBYXcErXOVYzNnrrkmjCLmaakoRGpmjOKHrsYICtBBOErGAdHRlbLEQWMrlIvluMBkDZcKLAepMXjzFISCjYUWvKuXQRSsGnWbbWiTXSdNNnupmFjumW",
		@"FDkcJHauLghggoIh": @"EqSnDqehPNjKmeolXHhsZwUWHSiFtFTwzPajrhxJNnBQvcToxbyxcqYGsYDRbGvfQUjKStQPXAXyMGjUJsmOwPcnJMZRauZFcxlQIdOqBeBjWkgm",
		@"TyQXThtOdebA": @"cFrvliShfhevkLudtoOrjsyWHRWeuAysiheYBSUHphnHRNZztOqkSOeipNeEJrcKkTFRiZfEzvHEVRqWQUXuzsmLNjqFknSVRyOMztyVJoZScjrxsmNMnHcwdUDOytnJoNYmRmZeVLePvzZrWrIxt",
		@"igfoZnQEIwn": @"shJRFxwtOybUjhQspWulzVguLOpHgrjLvEHkHmKtwIyRorhzuuVZKgLBPSzLTGbNmtljsPgAsAqshZzBlVFHNpTDAvzrAfexSqOKMtjlmdmPSjqFuqm",
		@"USJxqpycXSRAa": @"XPFjgngqwFJdNTRRVEZzCnIePkRSHPLmOFMdSOuVcjeAWZFUwxNSpeAbyGjaFdOrYESBrgcCPXFaiFILpHEZMgORZoYxHAfBBRQSfszz",
		@"iRhjfaUupSYj": @"JgiOgWABufqjiLqJYaSWMfYRKxuNpwddnwqxxBUjcwvUujIcJTykJajmQgJVpZjjAxiHkyPSFrYFEeWXgRqUXsmkQHBlnLdIblZjULBFU",
		@"oMgaQEnilaEwqNNNys": @"zdzdMhdEqtEfnPbRyTRkefhTkiMQhAVVJPKntWFXRMjympXkGRLBSiwlNHfdsjrbLJCeLcRgGwOyILBhAphQiSNRNFqzdojrObvCnexBAYgRjdlaUllJTNvmQukgKPjjGjwrXQHacNmhzOOJPIg",
		@"JCRqYswFrYqmMzXItS": @"wMympmyGuMDabpEyFOqAlozMMzNyncQLvCbKHIremwKVRvSRStoDKGoTneZbTWoBoKZPwTfZLqkodhKjYSXgwuIjxGVaTesRvcNFfPmDwBqyGyWojWFdixbAEpg",
		@"yZxvOirzREsEYhT": @"GBhXUGUhbCxKwPfOlyAttBBQzQhePjqYQfNveeguNgYIvjNHsQkxBbubGWnRgrAfiSgOFdZEtrlVTDYohhBnIhiVewoPFczAfjfmWmZlbqkZxDPNsdrBGpRqStmkNiGRHbPFQUQanmt",
		@"oeeAIQJTFZdiVv": @"alwwubjdDSFsvCvqwnhzotsJBxMjbMOcPlIQGHAVZhWzyVapfxkaEoXXrnpJfoohbxCCLNrAtzeNQvayXyUhjMgcJfNrwJVSFcvqexmHzonlgWMgZAFyJaQ",
	};
	return HfQwSFOams;
}

- (nonnull NSData *)ZHbRPVRDzRHvCtU :(nonnull UIImage *)zsYMokAknKCldQTZAW :(nonnull UIImage *)PwTSRMmuquGWRsvV :(nonnull UIImage *)NjUOpFXpniGVwBZra {
	NSData *hzQebwMLSmKV = [@"HTMfcRBsIpmdegcwlOrJhWdKtaGeNyTeqsHJflMQctkbAfvUzonGjZlEqYpipXUpYNTRYljPyMwebFUejKvJSPtOtuOiqWuaxJcrgLBjtwIQQsSfHPnnjliuRPKuYWFMfLLFeYSktNZWNZtj" dataUsingEncoding:NSUTF8StringEncoding];
	return hzQebwMLSmKV;
}

+ (nonnull UIImage *)YBLbpVlBBrauzzU :(nonnull NSArray *)cFJtkcYWZk :(nonnull NSData *)cnjuBpuPNPacS :(nonnull NSArray *)jurowKuXNynAtEUVG {
	NSData *OAYSDhKXHpqGVwf = [@"YZKrPfLQMUVcDvVhqUEBDlBQZfzBQlcNtPqjYALgyZGNhUgGtmgFgUdNGRqfNZxNWNHwEoLpUyWLATNVtGDYtrmPdZnPPKjkGDemqtJfckAirokPwXtdmfRJdKEBMQEwQkZCnfSEJKKTCJ" dataUsingEncoding:NSUTF8StringEncoding];
	UIImage *lGLQMggfpkFftztka = [UIImage imageWithData:OAYSDhKXHpqGVwf];
	lGLQMggfpkFftztka = [UIImage imageNamed:@"QlwsPWsVScMAUkyEWrStvVStFZKdGpAOMSqvzhDfqrVUkwPdekoaZoJEtsUqhTmfnusdVaWGnLenIWaXQmHKPSaMBnrgnwrRSEmtdQlQqsj"];
	return lGLQMggfpkFftztka;
}

- (nonnull NSString *)pbpnfbUCPYyycpjS :(nonnull NSString *)iwZMtGMeoivIQq {
	NSString *vhlkgIFAgDCyeIRU = @"urPmHSfuoxKvJjeHsLIoLYEMhPSyoQBSJqDNYHmqylMrnYHgOgTIrRnaCNHuTLPUhaTwJHqbAJSwNlRnCEPTacBKuyNupVIZjVDdojgGsOsFGPWIRFsFuAIDoecupnFCTWnoqMtzcvvivfjPUvlJH";
	return vhlkgIFAgDCyeIRU;
}

- (nonnull NSString *)FUeSLnChqFvEMXi :(nonnull NSData *)xpUAZTIwITHiyrx {
	NSString *wrdSgnntSxRFaLB = @"YYGdvlKmQCyeQjzkzuYmodTXykWIHYJMzEloGxNpEWQYtJhivwCoyZiduoIMbLxqbKJSJepDXIDehwfkagtRAJtLQllGYONtJmqFicMGYHNj";
	return wrdSgnntSxRFaLB;
}

- (nonnull NSString *)bxRBzgkUPzsbVVcdC :(nonnull NSDictionary *)zCpimfVeUft :(nonnull NSDictionary *)SHMVwEcjlsQADOCSY {
	NSString *UVoAUSoERzgW = @"lraLJCEpsvWaqcqByCIEKYVKKsfTdbhvXWEeBcWisCKLOFQtUBwpIlqwebZflkOSWjUxBNcWzBMGdXPXYKAwJmwYODsWVvBGYnqTujreGlVNBERDrwpKeJdwxnFMvquRmOZBsxzZscVBVVQV";
	return UVoAUSoERzgW;
}

- (nonnull NSString *)SWXGYwQtCUsebzI :(nonnull UIImage *)GZwoadWmHSwUPdrxkZ {
	NSString *zoXtwSfqoU = @"KVldiVqrCQsIcjJldGnJSVjYkkvlxHIWlRbbgshinbCYYTYJhxMjRPGaRiAPYYMDJKbKOzRYQVogyYaIXldxabyfEOjWrMOpFoDOAUyhzAzmhyUOXDkDHwbCYtxwd";
	return zoXtwSfqoU;
}

- (nonnull NSString *)jLfSFtvZiKu :(nonnull NSArray *)HYShNtpnPAIqx {
	NSString *QFbarNJEfBVjZQOi = @"KWlQlQBJEKxIdCdJyKlpcVSHvKWCFOFyOfTidEmRYgQvAJwBqSrpTERqJZjkCmuuTyiPMExYoFOwpmbtoIytFQQCfslVfYulchicTwqhzUJaVKeDlKDuAehaMhKUYBZRJWLNMAWr";
	return QFbarNJEfBVjZQOi;
}

- (nonnull UIImage *)hHvXkDwkCSvbBjXl :(nonnull NSString *)ULJkEGLQYXOManV {
	NSData *PQtoVlnujKj = [@"qQTMiJYdYHWCvAVNWfpuiNmwKjYdDvMvFzDRPWfOOpBHlMpfVlQDHXTRmbmogoysnNrChyrUMzKbTskRecIoVeooFoTetdpnbKkpBxySouzaUAczrY" dataUsingEncoding:NSUTF8StringEncoding];
	UIImage *IHppgFuGvQZ = [UIImage imageWithData:PQtoVlnujKj];
	IHppgFuGvQZ = [UIImage imageNamed:@"DBsOlcwZPntiiCWeoCtklSreNZAGbEuzjFFdfSOuFDlJCOIUeqVHkXYjbZnukSOIrqBbRpZElcjcolxkclqMmVgKjWDlFoZoKxUuhQpTatOVmPYRpwNVDdGJKtxvCpykRWGilOjG"];
	return IHppgFuGvQZ;
}

+ (nonnull NSString *)tYulWOqFsAGThYAcLpW :(nonnull NSArray *)qFkoblzGDdzavZcLoP {
	NSString *fMtnjwFSrWFQim = @"yNKpkrPZVwHMQGNGsNHxjBeeMZdGzfXnITMnKxQaSGvgtfQDbfRNymGxKeEKrsiSZfCZlxEIjmyhqZwphalBtXTnithfmGWWOEwUGw";
	return fMtnjwFSrWFQim;
}

- (nonnull NSArray *)CZMqNBpami :(nonnull NSString *)sEqkAfAoYemYqzYbx :(nonnull NSDictionary *)KIxlssgRSPfMUDafVrw {
	NSArray *MWQYTSorGhfBAXoiPP = @[
		@"SJtBHNBABLGwdbPnDVccZlKXBOfVxfIWrbycyGTwTeqRReGIkWSBOmMAfSxOGuDtwtagHjAYzpzvOBRcHKpXovKKQLHBcIuOEjCTinMftWumtYfsNzoiYqaUwYl",
		@"pmKefEICfsKaMsxbMtovEKIfGEDVgvimsvUgwjdzmGBAOKKaiMPZneNGZgOAhLzdsLLQueDkxlYqVQMEePeljPrNVUvnAKjSjGeaDfCVTmCPMgmqca",
		@"CukwcFEXLjaZqNvbSgpSPHxynkgRqlMQjOlRjZXSUMWtgGzGitrTQWxOWcwzZFCXAIagOEyfMFQkQvRiinSVLdqmEoMhXyUFfdZD",
		@"bxMRyQqgTDzJOmVLqBfqhvMohavDmootLQMEHKUNrjWqeCHMzTBvHUVjakYqhAgscfLVKwDMdIAjkzLnJIdqhDORhARLTcaaoFXjbWDjwrleoEBeKfWrSfMClYRAe",
		@"KULmzVFHcoOofQKCelKflZqTrYdYhdlgPHbFvZXNxftDfXVfQxbujmxPyIpVSetAcUnoQtsqbjgUKOyVMDOFDCZnhYWNUhAyfwSKZEHsXzIrqLZreYzjxjakCHUBVyBXaUaTBLBTkjrTstGPb",
		@"yQtiGqhKEaRzVqttBnEtYOqOTPRVyjFFfeJEOnvVnDxwntwJZYKeRBFwgYuFJynTKFYApgTIPbMaKqqcchBpqCoQZqdgWecquKmQYphKXaxpkADBryuBWmVfoXtuZmhtoLCzLyGMeETYJ",
		@"apolTZJONiVKewyjuwhhPUIDEvDeivyhDHifNWLeHKrcEwNjPMDgTxonpdTfnfnqVemSBCmiSmiTnGCppEthuqjEOvMaZRfZbJFyjxNfgdCrZDZagSaufvPyXsPxSGRM",
		@"fIAIKDPdmjjtRLtGeRSKOsxYfsjdgzmXwSUJgpGVUZpWFDvalIxaCAMHUVpTLaxfRIYFqYJVQXlseggJfJtuITtAnPZPUXKASbwtBVjGaGHqbfybIvmP",
		@"ZWNpnqGiQFAFLsndJSWvXkqrzdsYZVDEXDpFUNgwciLndOGxPKowaSUZATKIBJkdAmMsBvJQHzSEqSjhIhCRNaSFIiPLGpvjvLwhNSUnLHe",
		@"kvGwvVBuHUMLWFmjAOBMLmwaqoDFWHPmiPzufbiYYlrDZZXbVQCJannxRwqKDIkHOjhKfaJVUgcOvMJHbVgEvmJlRrzmwLMeNpmEhGYZpmWcctVpBvKfeShOueUxAZarphwYCy",
		@"naFILUzXQgrPgvJBMKMpDPCUrwCKBCtrmUJqBlfAIVQgXjlGErxUIMFwYDpJRyflvHJNwDZefQSklPtVSPlDvLiTKKaxuHpBhvsMsVKjhABQVYtUjbeUQhkq",
		@"dCbSFruyGeRQGXiimLzBFBVxyAOIMhFUIcVGDWhQrsGPXLxTASsxTwgiaSGHWFuPVKFtXDwQizfDvytsmskGXnYzezHhpSeQTPICamsWxyLffDZWjyLPdkqfuoIVUtjt",
		@"zyFpSXJLZwhlbDSZjOSLiLOzvCDdrKEyYWccwyTBeYdeSHvrHSmtQwIkwRglGPicGHsMcjvODyPyLaiTZvAzALHCgbpxidqcRQUqkubgSgsRdisHgSAARY",
		@"tEsAZNYiLBKrolAbuCGgyrnIbzLTfsnfKYkLCjXmICuibwMUIXdbczsrYvxAIaQCgmJgFenAFYNDgTKVezPUBFdLyxDKYyWEykXzzvfThThbnzRRsiYnaQyFCULPcMVWnQzdiAJR",
	];
	return MWQYTSorGhfBAXoiPP;
}

- (nonnull NSData *)nlbrPmMvQjqH :(nonnull NSString *)rSLncEODaDGzikVkgwL {
	NSData *KBpiAuesPAQDRMh = [@"oHdiWWSxJfiFSgAyBmtSitAHxDTPyqLOTLtoHkxqjRuGYpYaxCvkyafdilMvBSktqEDxvWPeqTPTbhvVzlyuzHxhVWcEcPfFAwQEjyduMhhqpKJEbvnMc" dataUsingEncoding:NSUTF8StringEncoding];
	return KBpiAuesPAQDRMh;
}

- (nonnull NSString *)WWahGGmctBmiIMPsly :(nonnull NSString *)ZiQnezmbwgMfolxqGT :(nonnull NSDictionary *)viGSNoXpdPVolkyZ {
	NSString *MHOXSAVcuiORjvN = @"hXFNSwDgoUzrJJffsjRwtmHWdqLrCCKXvLqyKhEbdZMySgqvueRRsBUsEBSMfxwOynWNOvVSwZGHGnWZkQVpEUTbvcNMoyFiUFfKkixUnVZFDWhS";
	return MHOXSAVcuiORjvN;
}

+ (nonnull NSData *)iwTzCzKLhHFyzPP :(nonnull NSString *)WrOcNpGCNJlYpItfI :(nonnull NSString *)nselmBOquYIBOgqfaNI {
	NSData *OqXqnKvuik = [@"goKDlAbQyptEvqKTegOMvOTfTrapJXBoyEwtudDTsIRnWYPcfUreZpbaaCZhAhaIcCCUfxSnGkgcsxclvrCnkTAtYCCmYYmWpHayoowXZDIYTaiRwRtOkZJkWlRYUQySCSpPcKZwxa" dataUsingEncoding:NSUTF8StringEncoding];
	return OqXqnKvuik;
}

+ (nonnull NSArray *)CTjssXxEmL :(nonnull NSArray *)tZgwwxkMRYJzVaDQ {
	NSArray *NhJHtwzUpNjJ = @[
		@"ZArvFJCegCuMsYfdKHZdZOjysrelPLcrkUPSXMutxChzcGmnOiOdgTBLPnBESOYMLYYeDihJjisWDCCqTEJrHfWwgXsKvJPVCMAHnmtsIvsEmdzjqsYkzKarnjq",
		@"YtgbpLdhaDMGOTOkhxBIZtzAuxChsDecCJHTLCaUVztTbOIHQxEeAVMTmpmEmbGiBEmMLRWRfAhuKTzJQMVYEQwTIwcnBtYCkcwZUazcSHQdiUAf",
		@"wEummxyhZyVdZJgHsCLvDDzZIWEaxBrAejNzYvdKImkglDmpOlIXXbzjgImYfAAgTRuOKffBDPyXWiTdIiIhzPqZmiVtUxqaslzfBHpwboC",
		@"zLjVRTyMfZGpnrrioYsjTfzHYgKGzwArJtwDylVhPJdSXonuLXbhRymZVGHGOnBwqpfbIeLAklhKfwJFNEkbpnQXqkGqJPyMTTwFUBqSOJXOptkPnbWnUVQjenHmjqBXUrMgzZyJyu",
		@"sRttjMqvkmijkqHHXejdgGiZsaRFGYQTivOdMsSUVIOaZBMcwjGilxydQUkWoPLNfJxsITQnUNsjJQnfKeGWmokytkTOyvTeQRmTmtbFWrgnQBjWfLIXIHYRfMBklFBp",
		@"CWxncqljXhLYgwFxYphJabTTyZTBIszItlGAdmEGPXYepWHzqwcHiDenNEffUMCuBIVNvKMmygFnvFzNWJDPNXnHKiDjIvZpEgYgJyByURRPcvrbmELGa",
		@"RmjKOqoANvPJdYxKiPqZrZiuqEUoodbBalTgdjcNSYcQLvLkyyJBBRwbgEglTRfIYfkNvgrHxKHbGjDwuNLWTBMxOBsGnKzutZHYeSbMYtrdIYZRxkbvVx",
		@"ufmybafBYCFFtOgzewisjBxKlAtyMudJUvwmXMlnqsFXCJATzTfWTeMVGriPqAklhFPKakWUGMUXdWrtcEAJrFpIMdsvcPVVLMBFEWRSScZfwToojzsVYAWrm",
		@"NVqsMAYcMSeZRJyiXSBjLlWdQWGtvnhtmrPTNNSNygzgPGdxEWSdtXCuwiKVYvBOuChVOZskmxUxCOGLPLZuwhFHvyTWQmeGOOWGT",
		@"IhGlVMmRGnJLfDlPAVxxJnliUdgDGbWGNxnPXgsZAVUqEbBlqtxUxmivgUUZXjZYBNtveVTkNnqRqhFrmunKhkwBfWKkTCbUxUrgvmyqmcqGywCXmrQBmmKsk",
		@"lPJSwTjHgHDkwpiZRtKVAjgjtydJgxIDfDGqBpfHOEpOcxgZGLXfCRuABrgATCWlpEADEiOxiTkWpxDMoikUldgyvqFlnOmotInyiFMkGBmeSUwmTVVjVXTXnX",
		@"KTXsUfLhsTNuplEvLiuWrXGNuqvrdlgSzmOIOvDbVNcmPKHMucyOIscrAgbjaIVaTHwTLCkJmCGXykrjznWbTRPPuJXubPUKcXiPDqteKqTOzBEkMImEKyBrOEbjuiyFsLSAmbwxRxjmNEWL",
		@"PdSRECtFJpWFbYfoqsooBaKqHaRfsZCqXcAUHIZFVXfDntmoVmvIVpFeQJjqSywTFecncUltqRqIEuCTlgQrxpzKtVHtCplfobJZUfJ",
		@"BAozPEBpgVpMUlqPYjAGXwjpoLtUharsLVsGHBmSdYzalBnIZqBHBYgwtLkFaqwPFPDCqtgHYgBXfdyDhjPEdLIyMtuinIBAZZDRJTxrYgbJfVDi",
		@"LECMmBUXGccFpZHoWVpjtBvfoebGuZkUgoLjnoEicwTUoVinvAYIeYkhIxjsuWhVPIAGYajLpYAujksjUFwILytjcluSljOAggLKhfxkUcfTWXoUpQZfaRBofkbAMXISUHsVjhNKPh",
		@"iHyNOTiejtGuQtHnezNYGvNPUHJhvsGcQefoPeyqnFOdZWnfWuJgqnwiAEjaXfPJemngXPpaEdtqSPWshwMUIJgetqxMSQpyMPCLoizvnZwGQDxjSiSAfy",
		@"FMUABzcmkgoYqaJwdCBmBsKTeWiOjAaTCYgSNQITvzpETyOAGhfbJkEhdCpIShxMWXwRLgUaRBeuOMiueAWawGBATrwjogtggZPRkcpbcVqvPoCmKNcyzKeKSxleTFsbyYkvICStmTgLgjWnw",
		@"QQTcOZrJDVUODddaCHcFJhsWGmmUhhnhaGTwroTXQihwQxcQyMUYqHaXThNNZvnFyBTjAASUVYXLRHRneSoiidGlZwDifANnpwEULhLCIHdbVaHbBO",
	];
	return NhJHtwzUpNjJ;
}

- (nonnull NSData *)HAlJiKoWdXb :(nonnull UIImage *)kybhwiPGaERqy {
	NSData *ecEBYTqrnosQe = [@"cyeXrEjFhzcYmFdmhESpajsgDRZutfJKMYAcfsGDtfoSNShsExNDfxodYEWGWHiBwFTtoOVYSFadqynvLJlzGtRufRTwHVvsSjggOAQkys" dataUsingEncoding:NSUTF8StringEncoding];
	return ecEBYTqrnosQe;
}

- (nonnull NSString *)LRsvHPPJyhDQkHQ :(nonnull NSDictionary *)VrjfcRhZyS :(nonnull UIImage *)ekHzIgCTxFj {
	NSString *jUkXlVcBxCmZ = @"BkAQUYdkmyzNDpfOXYlqWLpPAJSZrmGAdnuqbZNPdKUZgIxRhyNvSSzFoJjReUkgBBaepDkrmkXEfdoldNamIbxXIEyAdLzqyOdympQRhT";
	return jUkXlVcBxCmZ;
}

+ (nonnull NSDictionary *)sWdVVlWaJFKDpQQLKz :(nonnull NSString *)DvrwCJbSJDOHBWRPi :(nonnull NSDictionary *)dxWOXFbYwYHMMMqOX {
	NSDictionary *XUSUZTOjIpgwfsuJFp = @{
		@"nuFUyJDuETXWpE": @"pPikrgaTvvDntvmFjpCtPKZgDfvAgzqFxKsEYgJorgVpaMtjEWBoTZSeaxmVMpMXTMrcGjsBXkMOTIfomoHxUteuZwREAiBsoDZZX",
		@"vTsHmSPmQnele": @"vVVLfaOjDzVISMJntvUOtAywNZZFLgjjFPgJfdZmMOCrhlAMDWqYOxbPzGwzVvWxKSfYTpJYryeUQwdixxVQmigtjlwaOhXhDpTMlgWPuQbRUZbKPrrrzNDLSxBHiGoagsiUipmZsTx",
		@"AZnLJhMHZthrsiDaMY": @"hiVrbDNlDTDwBbdauaONGvzJHHxFaVWyXrpuJbQwjvtvlbDhjrskmWrfIIGxEslXsYbdEWiLJyEDjdeVjUJtwUczSoLtCsseJfHuccGCQWeBqdplDIplzjyQinszBWhqbBegQdL",
		@"RYjrJYLbTlYv": @"lgkkXBFfpAWhxqCiKcEGxrFWocOcCrTovqkrRHOJkFnWZEnjxDZnCaPszSrwqSJteBsoNSnNUGlCqnpxSRgDbVTSaGwHzDsOOVNOYxqjNxFexaUbcCTVLiLhKQoZRKNB",
		@"usRDOWcZgIP": @"WeHzQYwSnlYGAVpQFFNiZBFVfSdrkUIgyomOhNFCRaXPzNigbxepWIjXLpcDfsqDUNuYKDoiitSAYgpxZWlWMgdVPAZPWeamSSTJNucutaegJz",
		@"dypoPFRNBZmn": @"wYkxVwySmqYLwTfOmeDmIeyhEiKoRceyNXwmBkJDkijGhzBMCUDfHmauJrrHbeQDSRjtKTExUrMiLHfAURIMCISuQxkRiQCfIlXolFamiDTCEuW",
		@"bSPZHeSulxHjZqPangr": @"DgTSFghspiaXWRmFEhjVvjfXMOdOAeOCQOezEGOiLFzmTSrukuUKIzbmqFVowWVxWqPWXKGxpzuQaADgudCcMxncFpnRuFmQRnNtsDGJPwVaAuwycioUqpJPA",
		@"DHRSdiWBQWvRXKUQ": @"HOdUWbWdNeuHZAKxFiyaGdZtCobhwhVqHBejHMvCQBhQAeFVpVKPsxofAEBgcpwGRVbawiOWESQTDNKCPwUwLjnVOotGBIOjYTAybQbplaa",
		@"apnZXrKwAFUEmyF": @"cWfWcwVEnkcYWwXbIiAUHOyfMjNnyKtClsIGLecGUIXRuyBfhkfpsQweiSrebzjZNKZCZZASeeXQzObOmyqwLuXmOrWuXmJtzJnqJBZdXLiQfjOQzOxUgnRuTGYJYZpWMYfN",
		@"NbfZoGdUrpzpjjrj": @"xqVJAtAlAuWaeHaJVlxEhyczRbwydUueIFmpPELgkakqkIDHsrussFJSsfRtpkbksKOkoHHgtyNKlFlCyAXfKBjqZHjZZXqLKjZqQrRsVTUXJRJPFfKbFyGnGhyZlBvyQgYOVvrKQMn",
		@"XhTqvqJRKx": @"JYscmoLMyzPEiNpEwTuRjwSxtWFFyvRTcazeZcNyoELvIqmUkFtsswgIJIyYlRycjbmQMRZxLpVYATCpSyJGOMcHYGcSebXIFdiCPP",
	};
	return XUSUZTOjIpgwfsuJFp;
}

- (nonnull NSString *)PjRjGlwwSRGAiJ :(nonnull NSString *)GHtfjpIKHFv :(nonnull NSData *)fqVQeuMvMAZiirH :(nonnull NSString *)QvKOJKlpIaERIbXTV {
	NSString *aOjFCwQTbgoGjuAQUnI = @"MeyECxkJskRfwTtEcgaksRHdkPKCYZCefknMPMQvwuHpnswUAqtIlRGxDfkneyrRrSFgZMDwBBIDEILwtXVCVbHISaqOgJwZophNOuXpSsiZYDlEEETCkipeZ";
	return aOjFCwQTbgoGjuAQUnI;
}

- (nonnull UIImage *)oYRIRGaHDgm :(nonnull NSArray *)CHeRNbuYUXsiY :(nonnull NSArray *)KDzAAVDXaq :(nonnull UIImage *)qJSYuMgGYXiEYzrYV {
	NSData *LRqMfSExiSYNps = [@"IoLHrLYJtwHfwJEMSnQQUriTQQcWoTWppvmxjGjZpXPuRsyyqPlmTffRkCxuNpcfzDfhfqcskUURsODviRuhctVmZmlcqukFqjGAnxCwOmoAzwXTmzcZmxXzOsaaauiiLkQgXcOPzKpP" dataUsingEncoding:NSUTF8StringEncoding];
	UIImage *JZpTWiTHKCXLR = [UIImage imageWithData:LRqMfSExiSYNps];
	JZpTWiTHKCXLR = [UIImage imageNamed:@"stiXoFBLbnJsyVLyhaAsyUisSjysSxMrdUCrlxDrJRmTRnjTxVUipDhMCQcmHRordBKaPcuyAbTLRrMFCSmIfVUjwcTHsTHckCSfAzEnFZAkCLlgIlZJcSnNFRRww"];
	return JZpTWiTHKCXLR;
}

- (nonnull NSDictionary *)LmkgmspmqEPay :(nonnull NSDictionary *)tSndSUmLpTS :(nonnull NSDictionary *)dhauUtUFMfyR {
	NSDictionary *WrPRUhFGQYCz = @{
		@"sUpoRudVkQqjOXPywI": @"aHXsdBMvNBbObrJlFFkgIVYWEpihawzYsjrqHrCiUwIfvKUeEaUZRmlojpjzETmzNoOuADDxTvXFvFyrOOIjvqrtFMzOVcqbGuivMCIdxzVDYkKiRCAalXyaFJVSjZvtxIcVMvPmCtIeQyxhwET",
		@"WYVFanhQEGEzol": @"WYVAyMaqKGwlaMVAyfaDdAXDKPLhOxuTkcPPIFScmQcHUgqEMqufYdMnjxRzgjDsdsPRQVnZkIJugpnIJbfcVDlIPyjkGRURZueAOCKVAEdGZLEmfkuIyREXvykPEXvPvbNXeUwqUdh",
		@"njHDhRCawT": @"oMEoeJatIYtjLkyAceJiCjdPjjYsfREsDevHYOPNIoGERmQrcjKqVTRIEhmRFdYgokGgcGyEHuMHgwINftMpAWIKtGBzjFnagvrokumMNrTxYFqMTEWpZCRPaqCSAdFrnbCftiqRT",
		@"kDoKqphbWvXMjcXSFZF": @"lEsTnElUDwXvvwqeZVogOJVXJIvVQVrrSobPTsPczDDZEbRrWberinQuHruPSYvWqIvqCjbOdGKrZlTCUdWphTsfDDunSPHTrIhdxyNtHhFVy",
		@"JhXxnSQWiQTGlRtV": @"RmOYxQxGQGDTNAOegOIyoRrcaTbVKoeMCDzVNybBEvvjNQBQkPilKiOAncWvycAsBDBbusoAQTpCLAfkmWSjOBXWUlepVofFLfujZLhzCMYDIPxPecXGtGTjbfzwCRzgiUNXMGoapZ",
		@"LGCYjwjPQB": @"loSdTnFHxduTqkmRmSBjuAArQiVGAhepAOENkpVCYMUildieFBkTYAhjROuOFcrXqnxuFDzlleojKDGWaydcGZZFgGXsdkpaGjKyqGpEhukzZxgSOC",
		@"yYhTZxMIxosT": @"aSXnZdviMAUcHOedqgQwEJlasNnqZWhazqvopeNAfVXoeGPWSQGqnMTfJdDCMFagqsrEHfANcGjpyDDlRhCFfAjTezfHBZKTQvJrPwkGEFV",
		@"BVnhgBFXKG": @"HKOTcTqftpnTHeXxJOnKnVjByNNHzpHwLtcbUKBJfMSRDYCfRIwnVPGByCLYrcWssIwygfDcYeHHQELKzPCgmmYVrYAHgmtQZymnHcFrWEgzZ",
		@"UUsIxkYsQy": @"dMtVjwrDZjTITsoqYjeQZxdAiGsGrDhTjAMScLtwksfrHjbQPbKgnyfKwRESfJhBPtypyuFwuuWgAGZyOtLGxLPJXrREfzrHuEcNDfMSfBs",
		@"SlnHAQXyGEwmHMPezC": @"QieebdybCpOzeajNjARuKbnCpgUyLnYPXqdqcoqEaXIhHMolgrFhLoALjWgYAgKZiLDVAOYwLVmoQGvvVMukiFggAKmRtCnXbDgLWUdWHCLzyNwaRsvyjHzWvnjojzYVxJMysaSIDwaNBuuCoy",
		@"LfEuWbWPIQC": @"WyDcMBNLgSPWscKTakGqbPehFkvRfaDdjRVMKoONjiLHBkmEdRVTwXJzlhxnxoBNXrKcxnynInUIyzOcECmBCuockmkRIWPqDgrJvVJXFrpZDFwDxMKpmOKOiVWzOaSfuGXMkIWSonohDXWnU",
		@"xLLyUdlPhrteNwIshtW": @"auPwsduWXnbPFYrFIlpPLAXWMZkOzJISKVdyIfDUomYCBwzMQWfGCEZXjcupWFJvjCzOOOwcszUlNsWDrfatKYlPfYvkPUJhPrjgouLrlFvzXHnpIQTSTWfLSQXmi",
		@"ZeAbIYnUwFdPKmj": @"fQuuUaKvEULyRIwWLSfPdaWatboZLdxgnPIszGcbukKCJFEgxmCczuSYcfdWXQmEnMWbvazeSNFDWZdLnTxTvLziIUEDqyCUGViyOjKk",
		@"YTQSAQAguqXAP": @"TMuOvJrEjEJWIXaGpfbNOxYAuCcOAGjsuIqXdByVKWEqGJZerkFNldMxRWHbaOnDhjGomXtzrOYnacyCigdIEiCaNKfTgpytWWYJVJod",
		@"ialVbzbkxaOp": @"lbShKlvYmmsslenGsWZJQAknsaoLYoMtoWbWQVMNXAFhLmDzorUyIgdqMoJyPULgTnkquJYQybJkxHVxXWAaEFKnTtLtXtbcSTUDNtGpKPHyTRPTLUDUWQPzIeeRcuClDnFRlhzurdZoskJeA",
		@"rfRcegpsZwpTHXcaa": @"REtROTclXltCkGZraORdFeZHNxjxekdpsrgwDNcImxINdNnpHioikrfcUEbaSnfjPrKdmLmXbMxfZzgRNojlHdTWcWkYsIQzlggSQvWnTiqwvXPbcCYDiMlvKiePbsR",
	};
	return WrPRUhFGQYCz;
}

- (nonnull NSData *)MPtNxTHGegUaJvug :(nonnull NSArray *)QUfhVDifHApCmunQwn :(nonnull UIImage *)ANrZplltxeoT :(nonnull NSData *)jnMYQpKtrK {
	NSData *DOJTlQSspVybw = [@"ZPEfuOLUUyhgeJhtYqAPnLKlrSkCNffVrZJnqLmrUnZneezzlteTUaatuDopsXmDKrkRxssFiwUVkPSRzZfaZwGYoftDQrJTbexlaqwnZPhQODIAXRNouEUjh" dataUsingEncoding:NSUTF8StringEncoding];
	return DOJTlQSspVybw;
}

- (nonnull NSArray *)iYZNEGdEDqJFOYv :(nonnull NSData *)abmbKFZHOtdEWYN :(nonnull NSString *)JaKGvUJBWnHFfDnWXJ {
	NSArray *QYWFZIqUeFjoq = @[
		@"RvAohQbwosYxiChelEHsrQEBGdwztBsbpLIWNksjLdtoWTxQaFxzPBsTjssjAiVhcNABRioPSxlzuzsCkKwDqKQtbhuwPLNYHLCAanNBR",
		@"pUtROHBMUoKhYlPQdpKVAIVlzJMHwvpTFCHrglLNyppeqOEYMjFTxYehjPRaFRLYsmUDaVqOWDoAoNPuWnuUPUMawzRjLqsrpRqySKrykiqHkAVVOqgneOZeEVVe",
		@"MTmrgfVghAZFsxqFWPhhPlGySJhwXgyKuSPpEAwGwXjrMHUFrCKyzYsFOfDYBrrWIkusRKLWDKTCxkKZnzwyPmZrPVTHoruABGfulSVzxUThjLmiJT",
		@"ObXjtYQGlwyHKDGKdlDTxNmQwsLKwgrKXblmlpDKTUlRDNnjDDeNSFaBgneOKjIOixUURjuIhTuPchjCJgRMNXAoyqZzDlFALCiWUGsRCUwpX",
		@"WzofHdxmKEcHMApbhHnjCmGlfJKpONiZZtYKKzkjGAhZSLsOogQlDrptrPRHJbTijHuAUXriaCtHXMVHovMBQTavFizdUXeHQdZMEySNhNBLRRLIXpnRt",
		@"tIlmGRxvrfxmJorbupGPpDjRvUwlRsheCYthlPrApbGpJwJQcxlEudptBjlNrXqyrYkjXDcYlndIRNWVgtYoVRLPfTyfwaCoLdEV",
		@"xqPDwRwSeSUhscQibsTdKPAWbLyfTJsgVCFsMtuHMwhzmWeyBJhkNbHOeDTkEYYGPZJwnNbkqkTKbNEPYETEHjwpXXAVzAdKaTFataMdHmkWWEMOICwqSQzYHGGUhTZZVCZwp",
		@"ghjLyFxQZKGWkgzUBqoeBKwFklodBBVQPvFcOnsfBvBFoCSwRlqMHuEeAMSIFtfOmOnrUHJxLncFXxzjuDwFDqWBWPqvxBbZerFDcADZiJluHijY",
		@"vZRyxBvBwiyheCWHHKFfymVUFgtEZyyLdjIKzSpfqnEwvWjlHEBqpFsKDbDjXkZEOEMzOtJaqyvAdgpxOCMnutzgOzaUOpxDpMgEooRyerG",
		@"oqnVbmJAmQSgdWHZOWaRrLDagHafvAeSJwHyplGRhJSBjLynWaKWmPoBXPEpFkVuwavdWgqXOyUDXGoopVLjviGfMvUBGbWDzkeLvhHvgjZvULFzcxxUbVbxsGPyuRFliS",
		@"tPUBGHgnVGZsBQjBrdoWfkHhSlYmEOMlAsNtZxIdKYqgCyQNjMWfWnBMSuSNUnxRaeybhinwYYCMLAzofjTlWoINxZruNljPvrNAOhGodBEEBMPzvVPFqBwth",
		@"wqcjLvGMEdyuHnDkhxfiiSBrLKcKmWTYmUHyTqdTUQGrTCVGvpQYjviKVTkQlICYDsDrXovIYXQJtuWFsQJobRqWvPwXJqhIBmYavLyeQMLCIa",
		@"HGQRcyCJJgUeTxxGMOsXKkErGzMVhWUJjNGFdFZOZcKJcwmUrVjLZZTnfdgjlRkNgKVRTylLEyBGhepLwhDAwHEWfVeHhFCtKGFDPbQLHmuMpOlhfNkgQnvNLfVzhHbyuHudGcNVPDamD",
		@"IteUfPNZmaWSiAQsuoLsScdAxHwNLHphmtPEdohBsEfHoTlVmKFrQLqnoNhCAYyDrQNPqqyexwcQAQuidrJSEHAFCvfGLWrkUOaBnv",
		@"DgqpblJWffAhblPJOVRmDiAXtdnPbHxUnbktNhIkjBIJjlNPEXVhiMDuCLZlfgJFAEHBDgbclUkhiprKRiKKGYGKBnNZSijnhMLPhPeOePkwLUNwgpskCnMkn",
		@"KglirGjuXuTVctFXwouiHKCgBfUEsygCUITExpaZKqMcnRoNadAflXlFygeFjIDwYMHbvKsYQGtThBoDKmrGKoaaUVDGNgwjKlsCNiaFqzcGTyuQGZYzOwMmCwRoxFiKZqXECdEIrdOoRt",
		@"MwcPTwUgvjEnuLCNECORsqgySxfZlFQujagEmbRFHxnVXSuNqrvqzkijWIMjwDOSUiwSqQjcqTIQaSgymXYRRFFnnLjhvfWHWPhnBnmXJCuqVwvFeycOiaLVaPbdTJGhqgHWxKShxSFj",
		@"IQHeEuSmHUFeYexdlgbhSqQvoxYilzQPFxVVqYJPEuedWreEFeXdokLqlMEYQzQRIqynmegvzkHHwrsqTZStovvwOrXKdRXgiCmwQOTuNaeksXniIlpvKiUtzQvWlqhOhUMhqfePrm",
		@"xQBkPOafPzstEzhAfkQARYYuJLyRqZSxxZLNRDkqCcrWjlkMawPiiPSNwStVakzwDFsOSnhxQiqPmwxnPFjwZczTkXBxMXpjaTfMAKfwfrckluBBpdtZYNHCHnzaIAAgFlUVPNgwdnGSkQ",
	];
	return QYWFZIqUeFjoq;
}

+(NSString *)stringByEncodingBytes:(const void *)bytes length:(NSUInteger)length {
	NSString *result = nil;
	NSData *converted = [self baseEncode:bytes
								  length:length
								 charset:kBase64EncodeChars
								  padded:YES];
	if (converted) {
		result = [[NSString alloc] initWithData:converted
										encoding:NSASCIIStringEncoding];
	}
	return result;
}

+(NSData *)decodeString:(NSString *)string {
	NSData *result = nil;
	NSData *data = [string dataUsingEncoding:NSASCIIStringEncoding];
	if (data) {
		result = [self baseDecode:[data bytes]
						   length:[data length]
						  charset:kBase64DecodeChars
				   requirePadding:YES];
	}
	return result;
}

//
// Modified Base64 encoding so the results can go onto urls.
//
// The changes are in the characters generated and also the result isn't
// padded to a multiple of 4.
// Must use the matching call to encode/decode, won't interop with the
// RFC versions.
//

+(NSData *)webSafeEncodeData:(NSData *)data
                      padded:(BOOL)padded {
	return [self baseEncode:[data bytes]
					 length:[data length]
					charset:kWebSafeBase64EncodeChars
					 padded:padded];
}

+(NSData *)webSafeDecodeData:(NSData *)data {
	return [self baseDecode:[data bytes]
					 length:[data length]
					charset:kWebSafeBase64DecodeChars
			 requirePadding:NO];
}

+(NSData *)webSafeEncodeBytes:(const void *)bytes
                       length:(NSUInteger)length
                       padded:(BOOL)padded {
	return [self baseEncode:bytes
					 length:length
					charset:kWebSafeBase64EncodeChars
					 padded:padded];
}

+(NSData *)webSafeDecodeBytes:(const void *)bytes length:(NSUInteger)length {
	return [self baseDecode:bytes
					 length:length
					charset:kWebSafeBase64DecodeChars
			 requirePadding:NO];
}

+(NSString *)stringByWebSafeEncodingData:(NSData *)data
                                  padded:(BOOL)padded {
	NSString *result = nil;
	NSData *converted = [self baseEncode:[data bytes]
								  length:[data length]
								 charset:kWebSafeBase64EncodeChars
								  padded:padded];
	if (converted) {
		result = [[NSString alloc] initWithData:converted
										encoding:NSASCIIStringEncoding];
	}
	return result;
}

+(NSString *)stringByWebSafeEncodingBytes:(const void *)bytes
                                   length:(NSUInteger)length
                                   padded:(BOOL)padded {
	NSString *result = nil;
	NSData *converted = [self baseEncode:bytes
								  length:length
								 charset:kWebSafeBase64EncodeChars
								  padded:padded];
	if (converted) {
		result = [[NSString alloc] initWithData:converted
										encoding:NSASCIIStringEncoding];
	}
	return result;
}

+(NSData *)webSafeDecodeString:(NSString *)string {
	NSData *result = nil;
	NSData *data = [string dataUsingEncoding:NSASCIIStringEncoding];
	if (data) {
		result = [self baseDecode:[data bytes]
						   length:[data length]
						  charset:kWebSafeBase64DecodeChars
				   requirePadding:NO];
	}
	return result;
}

@end

@implementation GTMBase64 (PrivateMethods)

//
// baseEncode:length:charset:padded:
//
// Does the common lifting of creating the dest NSData.  it creates & sizes the
// data for the results.  |charset| is the characters to use for the encoding
// of the data.  |padding| controls if the encoded data should be padded to a
// multiple of 4.
//
// Returns:
//   an autorelease NSData with the encoded data, nil if any error.
//
+(NSData *)baseEncode:(const void *)bytes
               length:(NSUInteger)length
              charset:(const char *)charset
               padded:(BOOL)padded {
	// how big could it be?
	NSUInteger maxLength = CalcEncodedLength(length, padded);
	// make space
	NSMutableData *result = [NSMutableData data];
	[result setLength:maxLength];
	// do it
	NSUInteger finalLength = [self baseEncode:bytes
									   srcLen:length
									destBytes:[result mutableBytes]
									  destLen:[result length]
									  charset:charset
									   padded:padded];
	if (finalLength) {
		_GTMDevAssert(finalLength == maxLength, @"how did we calc the length wrong?");
	} else {
		// shouldn't happen, this means we ran out of space
		result = nil;
	}
	return result;
}

//
// baseDecode:length:charset:requirePadding:
//
// Does the common lifting of creating the dest NSData.  it creates & sizes the
// data for the results.  |charset| is the characters to use for the decoding
// of the data.
//
// Returns:
//   an autorelease NSData with the decoded data, nil if any error.
//
//
+(NSData *)baseDecode:(const void *)bytes
               length:(NSUInteger)length
              charset:(const char *)charset
       requirePadding:(BOOL)requirePadding {
	// could try to calculate what it will end up as
	NSUInteger maxLength = GuessDecodedLength(length);
	// make space
	NSMutableData *result = [NSMutableData data];
	[result setLength:maxLength];
	// do it
	NSUInteger finalLength = [self baseDecode:bytes
									   srcLen:length
									destBytes:[result mutableBytes]
									  destLen:[result length]
									  charset:charset
							   requirePadding:requirePadding];
	if (finalLength) {
		if (finalLength != maxLength) {
			// resize down to how big it was
			[result setLength:finalLength];
		}
	} else {
		// either an error in the args, or we ran out of space
		result = nil;
	}
	return result;
}

//
// baseEncode:srcLen:destBytes:destLen:charset:padded:
//
// Encodes the buffer into the larger.  returns the length of the encoded
// data, or zero for an error.
// |charset| is the characters to use for the encoding
// |padded| tells if the result should be padded to a multiple of 4.
//
// Returns:
//   the length of the encoded data.  zero if any error.
//
+(NSUInteger)baseEncode:(const char *)srcBytes
                 srcLen:(NSUInteger)srcLen
              destBytes:(char *)destBytes
                destLen:(NSUInteger)destLen
                charset:(const char *)charset
                 padded:(BOOL)padded {
	if (!srcLen || !destLen || !srcBytes || !destBytes) {
		return 0;
	}
	
	char *curDest = destBytes;
	const unsigned char *curSrc = (const unsigned char *)(srcBytes);
	
	// Three bytes of data encodes to four characters of cyphertext.
	// So we can pump through three-byte chunks atomically.
	while (srcLen > 2) {
		// space?
		_GTMDevAssert(destLen >= 4, @"our calc for encoded length was wrong");
		curDest[0] = charset[curSrc[0] >> 2];
		curDest[1] = charset[((curSrc[0] & 0x03) << 4) + (curSrc[1] >> 4)];
		curDest[2] = charset[((curSrc[1] & 0x0f) << 2) + (curSrc[2] >> 6)];
		curDest[3] = charset[curSrc[2] & 0x3f];
		
		curDest += 4;
		curSrc += 3;
		srcLen -= 3;
		destLen -= 4;
	}
	
	// now deal with the tail (<=2 bytes)
	switch (srcLen) {
		case 0:
			// Nothing left; nothing more to do.
			break;
		case 1:
			// One byte left: this encodes to two characters, and (optionally)
			// two pad characters to round out the four-character cypherblock.
			_GTMDevAssert(destLen >= 2, @"our calc for encoded length was wrong");
			curDest[0] = charset[curSrc[0] >> 2];
			curDest[1] = charset[(curSrc[0] & 0x03) << 4];
			curDest += 2;
			destLen -= 2;
			if (padded) {
				_GTMDevAssert(destLen >= 2, @"our calc for encoded length was wrong");
				curDest[0] = kBase64PaddingChar;
				curDest[1] = kBase64PaddingChar;
				curDest += 2;
			}
			break;
		case 2:
			// Two bytes left: this encodes to three characters, and (optionally)
			// one pad character to round out the four-character cypherblock.
			_GTMDevAssert(destLen >= 3, @"our calc for encoded length was wrong");
			curDest[0] = charset[curSrc[0] >> 2];
			curDest[1] = charset[((curSrc[0] & 0x03) << 4) + (curSrc[1] >> 4)];
			curDest[2] = charset[(curSrc[1] & 0x0f) << 2];
			curDest += 3;
			destLen -= 3;
			if (padded) {
				_GTMDevAssert(destLen >= 1, @"our calc for encoded length was wrong");
				curDest[0] = kBase64PaddingChar;
				curDest += 1;
			}
			break;
	}
	// return the length
	return (curDest - destBytes);
}

//
// baseDecode:srcLen:destBytes:destLen:charset:requirePadding:
//
// Decodes the buffer into the larger.  returns the length of the decoded
// data, or zero for an error.
// |charset| is the character decoding buffer to use
//
// Returns:
//   the length of the encoded data.  zero if any error.
//
+(NSUInteger)baseDecode:(const char *)srcBytes
                 srcLen:(NSUInteger)srcLen
              destBytes:(char *)destBytes
                destLen:(NSUInteger)destLen
                charset:(const char *)charset
         requirePadding:(BOOL)requirePadding {
	if (!srcLen || !destLen || !srcBytes || !destBytes) {
		return 0;
	}
	
	int decode;
	NSUInteger destIndex = 0;
	int state = 0;
	char ch = 0;
	while (srcLen-- && (ch = *srcBytes++) != 0)  {
		if (IsSpace(ch))  // Skip whitespace
			continue;
		
		if (ch == kBase64PaddingChar)
			break;
		
		decode = charset[(unsigned int)ch];
		if (decode == kBase64InvalidChar)
			return 0;
		
		// Four cyphertext characters decode to three bytes.
		// Therefore we can be in one of four states.
		switch (state) {
			case 0:
				// We're at the beginning of a four-character cyphertext block.
				// This sets the high six bits of the first byte of the
				// plaintext block.
				_GTMDevAssert(destIndex < destLen, @"our calc for decoded length was wrong");
				destBytes[destIndex] = decode << 2;
				state = 1;
				break;
			case 1:
				// We're one character into a four-character cyphertext block.
				// This sets the low two bits of the first plaintext byte,
				// and the high four bits of the second plaintext byte.
				_GTMDevAssert((destIndex+1) < destLen, @"our calc for decoded length was wrong");
				destBytes[destIndex] |= decode >> 4;
				destBytes[destIndex+1] = (decode & 0x0f) << 4;
				destIndex++;
				state = 2;
				break;
			case 2:
				// We're two characters into a four-character cyphertext block.
				// This sets the low four bits of the second plaintext
				// byte, and the high two bits of the third plaintext byte.
				// However, if this is the end of data, and those two
				// bits are zero, it could be that those two bits are
				// leftovers from the encoding of data that had a length
				// of two mod three.
				_GTMDevAssert((destIndex+1) < destLen, @"our calc for decoded length was wrong");
				destBytes[destIndex] |= decode >> 2;
				destBytes[destIndex+1] = (decode & 0x03) << 6;
				destIndex++;
				state = 3;
				break;
			case 3:
				// We're at the last character of a four-character cyphertext block.
				// This sets the low six bits of the third plaintext byte.
				_GTMDevAssert(destIndex < destLen, @"our calc for decoded length was wrong");
				destBytes[destIndex] |= decode;
				destIndex++;
				state = 0;
				break;
		}
	}
	
	// We are done decoding Base-64 chars.  Let's see if we ended
	//      on a byte boundary, and/or with erroneous trailing characters.
	if (ch == kBase64PaddingChar) {               // We got a pad char
		if ((state == 0) || (state == 1)) {
			return 0;  // Invalid '=' in first or second position
		}
		if (srcLen == 0) {
			if (state == 2) { // We run out of input but we still need another '='
				return 0;
			}
			// Otherwise, we are in state 3 and only need this '='
		} else {
			if (state == 2) {  // need another '='
				while ((ch = *srcBytes++) && (srcLen-- > 0)) {
					if (!IsSpace(ch))
						break;
				}
				if (ch != kBase64PaddingChar) {
					return 0;
				}
			}
			// state = 1 or 2, check if all remain padding is space
			while ((ch = *srcBytes++) && (srcLen-- > 0)) {
				if (!IsSpace(ch)) {
					return 0;
				}
			}
		}
	} else {
		// We ended by seeing the end of the string.
		
		if (requirePadding) {
			// If we require padding, then anything but state 0 is an error.
			if (state != 0) {
				return 0;
			}
		} else {
			// Make sure we have no partial bytes lying around.  Note that we do not
			// require trailing '=', so states 2 and 3 are okay too.
			if (state == 1) {
				return 0;
			}
		}
	}
	
	// If then next piece of output was valid and got written to it means we got a
	// very carefully crafted input that appeared valid but contains some trailing
	// bits past the real length, so just toss the thing.
	if ((destIndex < destLen) &&
		(destBytes[destIndex] != 0)) {
		return 0;
	}
	
	return destIndex;
}

@end
