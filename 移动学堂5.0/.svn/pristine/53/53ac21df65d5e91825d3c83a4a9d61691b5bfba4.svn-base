//
//  CreateVideoCourseController.m
//  MoveSchool
//
//  Created by edz on 2017/12/16.
//
//

#import "CreateVideoCourseController.h"
#import "TBCityIconFont.h"
#import "AddMusicController.h"
#import "AERecorder.h"
#import "AEAudioFilePlayer.h"
#import "TopImageButton.h"
#import "DWTools.h"
#import <AVFoundation/AVFoundation.h>
#import "CutMusicController.h"
#define kFileManager [NSFileManager defaultManager]

typedef enum {
    /** 普通 */
    Normal = 0,
    /** 录音中 */
    Recording,
    /** 试听 */
    ShiTing,
} CurrentStatue;

// 保存的录音文件名字
static NSString *ch1RecorderFileName = @"ch1Recording.m4a";

@interface CreateVideoCourseController ()<AddMusicControllerDelgate, CutMusicControllerDelete>{
    dispatch_source_t timer;
}

@property (nonatomic, assign) CurrentStatue statue;

@property (nonatomic, strong) AERecorder *recorder;

@property (nonatomic, strong) AEAudioController *audioController;

@property (nonatomic, strong) AEAudioFilePlayer *selectedSongCH1Player;

@property (nonatomic, strong) AEAudioFilePlayer *recordVideoPlayer;

@property (nonatomic, strong) UIButton *addButton;

@property (nonatomic, strong) UIView *musicContentView;

@property (nonatomic, strong) UILabel *timeLabel;

@property (strong, nonatomic) UISlider *durationSlider;

@property (strong, nonatomic) UISlider *recordDurationSlider;

@property (nonatomic, strong) UILabel *startLabel;

@property (nonatomic,assign) int timeCount;

@property (nonatomic, strong) UIView *footView;

@property (nonatomic, strong) UILabel *endTime;

@property (nonatomic, strong) UILabel *startTime;

@property (nonatomic, strong) UIView *recordTime;

@property (nonatomic, strong) NSTimer *playTimer;

@property (nonatomic, strong) UIButton *recordButton;

@property (nonatomic, strong) UIButton *auditionButton;

@property (nonatomic, strong) UIView *auditionFootView;

@property (nonatomic, strong) UIButton *openMusic;

@property (nonatomic, copy) NSString *path;

@property (nonatomic, strong) NSMutableArray *paths;

@property (nonatomic, strong) NSString *filePath;

@end

@implementation CreateVideoCourseController

- (void)viewWillAppear:(BOOL)animated{
    
    // Called when the view is about to made visible. Default does nothing
    [super viewWillAppear:animated];
    
    UINavigationBar *navigationBar = self.navigationController.navigationBar;
    // bg.png为自己ps出来的想要的背景颜色。
    [navigationBar setBackgroundImage:[UIImage createImageWithColor:MainColor]
                       forBarPosition:UIBarPositionAny
                           barMetrics:UIBarMetricsDefault];
    [navigationBar setShadowImage:[UIImage new]];
    
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    self.title = @"录音";
    
    self.statue = Normal;
    
    self.paths = [NSMutableArray array];
    
    UIImageView *headerView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, self.view.width, 300)];
    headerView.image = [UIImage imageNamed:@"bg"];
    [self.view addSubview:headerView];
    
    UIImageView *timeView = [[UIImageView alloc] initWithFrame:CGRectMake(0, mainSpacing15, 165, 165)];
    timeView.centerX = self.view.width * 0.5;
    timeView.image = [UIImage imageNamed:@"t_bg"];
    [headerView addSubview:timeView];
    
    UILabel *timeLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, timeView.width, 44)];
    self.timeLabel = timeLabel;
    timeLabel.centerY = timeView.height * 0.5;
    timeLabel.text = @"00:00:00";
    timeLabel.textColor = [UIColor whiteColor];
    timeLabel.textAlignment = NSTextAlignmentCenter;
    timeLabel.font = [UIFont systemFontOfSize:22];
    [timeView addSubview:timeLabel];
    
    UIButton *addButton = [[UIButton alloc] initWithFrame:CGRectMake(mainSpacing15, headerView.height - 45 - 25, self.view.width - mainSpacing15 * 2, 45)];
    self.addButton = addButton;
    addButton.layer.borderColor = MainColor.CGColor;
    addButton.layer.borderWidth = 0.5;
    addButton.layer.cornerRadius = fillet;
    addButton.layer.masksToBounds = YES;
    addButton.backgroundColor = RGBCOLOR(255,133,66);
    [addButton addTarget:self action:@selector(addButtonClick) forControlEvents:UIControlEventTouchUpInside];
    [addButton setTitle:@"添加背景音乐" forState:UIControlStateNormal];
    [addButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    addButton.titleLabel.font = [UIFont systemFontOfSize:ys_28];
    [headerView addSubview:addButton];
    
    //歌曲内容
    UIView *musicContentView = [[UIView alloc] initWithFrame:CGRectMake(mainSpacing15, headerView.height - 90 - mainSpacing15, addButton.width, 90)];
    musicContentView.layer.borderColor = MainColor.CGColor;
    musicContentView.layer.borderWidth = 0.5;
    musicContentView.layer.cornerRadius = fillet;
    musicContentView.layer.masksToBounds = YES;
    musicContentView.hidden = YES;
    self.musicContentView = musicContentView;
    
    UIButton *changeMusic = [[UIButton alloc] initWithFrame:CGRectMake(musicContentView.width - 64 - 5, mainSpacing, 64, 17)];
    [changeMusic addTarget:self action:@selector(addButtonClick) forControlEvents:UIControlEventTouchUpInside];
    changeMusic.backgroundColor = [UIColor whiteColor];
    changeMusic.layer.cornerRadius = 8.5;
    changeMusic.layer.masksToBounds = YES;
    [changeMusic setTitle:@"更换音乐" forState:UIControlStateNormal];
    changeMusic.titleLabel.font = [UIFont systemFontOfSize:ys_f24];
    [changeMusic setTitleColor:MainColor forState:UIControlStateNormal];
    [musicContentView addSubview:changeMusic];
    
    UIButton *openMusic = [[UIButton alloc] initWithFrame:CGRectMake(changeMusic.x - 100 - mainSpacing, 0, 100, 17)];
    self.openMusic = openMusic;
    [openMusic addTarget:self action:@selector(openMusicClick:) forControlEvents:UIControlEventTouchUpInside];
    openMusic.centerY = changeMusic.centerY;
    openMusic.titleEdgeInsets = UIEdgeInsetsMake(0, mainSpacing, 0, 0);
    [openMusic setTitle:@"已开启音乐" forState:UIControlStateNormal];
    [openMusic setTitle:@"已关闭音乐" forState:UIControlStateSelected];
    openMusic.titleLabel.font = [UIFont systemFontOfSize:ys_f24];
    [openMusic setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [openMusic setImage:[UIImage iconWithInfo:TBCityIconInfoMake(@"\U0000e625", ys_f24, [UIColor whiteColor])] forState:UIControlStateSelected];
    [openMusic setImage:[UIImage iconWithInfo:TBCityIconInfoMake(@"\U0000e624", ys_f24, [UIColor whiteColor])] forState:UIControlStateNormal];
    [musicContentView addSubview:openMusic];
    
    UILabel *nameLabel = [[UILabel alloc] initWithFrame:CGRectMake(mainSpacing, CGRectGetMaxY(openMusic.frame) + 5, musicContentView.width - 2 * mainSpacing, 20)];
    nameLabel.text = @"童话镇";
    nameLabel.textColor = [UIColor whiteColor];
    nameLabel.font = [UIFont systemFontOfSize:ys_28];
    [musicContentView addSubview:nameLabel];
    
    //滑动条
    self.durationSlider = [[UISlider alloc] initWithFrame:CGRectMake(nameLabel.x, CGRectGetMaxY(nameLabel.frame), nameLabel.width , 20)];
    [self.durationSlider addTarget:self action:@selector(durationSliderChange:) forControlEvents:UIControlEventValueChanged];
    [self.durationSlider setThumbImage:[UIImage imageNamed:@"kc_jindutiao"] forState:UIControlStateNormal];
    [self.durationSlider setThumbImage:[UIImage imageNamed:@"kc_jindutiao-yuandian"] forState:UIControlStateHighlighted];
    headerView.userInteractionEnabled = YES;
    musicContentView.userInteractionEnabled = YES;
    [musicContentView addSubview:self.durationSlider];
    
    [self.durationSlider setMinimumTrackTintColor:RGBCOLOR(255,185,147)];
    [self.durationSlider setMaximumTrackTintColor:RGBCOLOR(255,185,147)];
    [self durationSlidersetting];
    
    //音量+
    UILabel *musicAdd = [[UILabel alloc] initWithFrame:CGRectMake(self.durationSlider.x, CGRectGetMaxY(self.durationSlider.frame), 0, 0)];
    musicAdd.text = @"音量-";
    musicAdd.textColor = [UIColor whiteColor];
    musicAdd.font = [UIFont systemFontOfSize:ys_f20];
    [musicAdd sizeToFit];
    [musicContentView addSubview:musicAdd];
    
    //音量+
    UILabel *musicDe = [[UILabel alloc] initWithFrame:CGRectMake(0, CGRectGetMaxY(self.durationSlider.frame), 0, 0)];
    musicDe.text = @"音量+";
    musicDe.textColor = [UIColor whiteColor];
    musicDe.font = [UIFont systemFontOfSize:ys_f20];
    [musicDe sizeToFit];
    musicDe.x = CGRectGetMaxX(self.durationSlider.frame) - musicDe.width;
    [musicContentView addSubview:musicDe];
    
    [headerView addSubview:musicContentView];
    
    
    self.audioController = [[AEAudioController alloc] initWithAudioDescription:AEAudioStreamBasicDescriptionNonInterleavedFloatStereo inputEnabled:YES];
    _audioController.preferredBufferDuration = 0.005;
    _audioController.useMeasurementMode = YES;
    [_audioController start:NULL];
    
    // 实例化AERecorder对象
    _recorder = [[AERecorder alloc] initWithAudioController:_audioController];
    
    _timeCount = 0;
    
    //按住说话
    UIButton *button = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 79, 79)];
    self.recordButton = button;
    [button setImage:[UIImage imageNamed:@"luyin"] forState:UIControlStateNormal];
    button.centerY = (self.view.height - CGRectGetMaxY(headerView.frame)) * 0.5 + CGRectGetMaxY(headerView.frame) - 64;
    [button addTarget:self action:@selector(buttonClick:) forControlEvents:UIControlEventTouchUpInside];
    button.centerX = self.view.width * 0.5;
    [button setImage:[UIImage imageNamed:@"shiting"] forState:UIControlStateSelected];
    button.titleLabel.textColor = AuxiliaryColor;
    [self.view addSubview:button];
    
    //试听暂停 继续
    UIButton *auditionButton = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 79, 79)];
    [auditionButton setImage:[UIImage imageNamed:@"shiting"] forState:UIControlStateNormal];
    auditionButton.hidden = YES;
    self.auditionButton = auditionButton;
    auditionButton.centerY = (self.view.height - CGRectGetMaxY(headerView.frame)) * 0.5 + CGRectGetMaxY(headerView.frame) - 64;
    [auditionButton addTarget:self action:@selector(auditionButtonClick:) forControlEvents:UIControlEventTouchUpInside];
    auditionButton.centerX = self.view.width * 0.5;
    [auditionButton setImage:[UIImage imageNamed:@"zanting"] forState:UIControlStateSelected];
    auditionButton.titleLabel.textColor = AuxiliaryColor;
    [self.view addSubview:auditionButton];
    
    UILabel *startLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, CGRectGetMaxY(button.frame), self.view.width, 30)];
    self.startLabel = startLabel;
    startLabel.textAlignment = NSTextAlignmentCenter;
    startLabel.centerX = button.centerX;
    startLabel.text = @"开始录音";
    startLabel.textColor = AuxiliaryColor;
    startLabel.font = [UIFont systemFontOfSize:ys_f24];
    [self.view addSubview:startLabel];
    
    NSArray *buttonTitles = @[@"试听",@"重录",@"裁剪",@"保存"];
    
    //底部菜单
    UIView *footView = [[UIView alloc] initWithFrame:CGRectMake(0, self.view.height - 44 - 64, self.view.width, 44)];
    self.footView = footView;
    UIView *sepaView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, footView.width, 0.5)];
    sepaView.backgroundColor = SepaViewColor;
    [footView addSubview:sepaView];
    footView.hidden = YES;
    for (int i = 0 ; i < buttonTitles.count; i ++) {
        UIButton *button = [[UIButton alloc] initWithFrame:CGRectMake(0, 0.5, footView.width * 0.25, footView.height)];
        button.tag = i;
        [button addTarget:self action:@selector(footButtonClick:) forControlEvents:UIControlEventTouchUpInside];
        [button setTitleColor:MainTextColor forState:UIControlStateNormal];
        button.x = button.width * i;
        [button setTitle:buttonTitles[i] forState:UIControlStateNormal];
        button.titleLabel.font = [UIFont systemFontOfSize:ys_28];
        [footView addSubview:button];
        
        if (i != 0) {
            UIView *sepaView = [[UIView alloc] initWithFrame:CGRectMake(i * button.width, 0, 0.5, footView.height - 2 * mainSpacing15)];
            sepaView.backgroundColor = SepaViewColor;
            sepaView.centerY = footView.height * 0.5;
            [footView addSubview:sepaView];
            
        }
    }
    [self.view addSubview:footView];
    
    //试听的时候底部菜单
    NSArray *auditionButtonTitles = @[@"裁剪",@"试听结束"];
    
    //底部菜单
    UIView *auditionFootView = [[UIView alloc] initWithFrame:CGRectMake(0, self.view.height - 44 - 64, self.view.width, 44)];
    self.auditionFootView = auditionFootView;
    UIView *auditionSepaView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, auditionFootView.width, 0.5)];
    auditionSepaView.backgroundColor = SepaViewColor;
    [auditionFootView addSubview:auditionSepaView];
    auditionFootView.hidden = YES;
    
    for (int i = 0 ; i < auditionButtonTitles.count; i ++) {
        UIButton *button = [[UIButton alloc] initWithFrame:CGRectMake(0, 0.5, auditionFootView.width * 0.5, auditionFootView.height)];
        [button addTarget:self action:@selector(auditionFootViewButtonClick:) forControlEvents:UIControlEventTouchUpInside];
        button.tag = i;
        [button setTitleColor:MainTextColor forState:UIControlStateNormal];
        button.x = button.width * i;
        [button setTitle:auditionButtonTitles[i] forState:UIControlStateNormal];
        button.titleLabel.font = [UIFont systemFontOfSize:ys_28];
        [auditionFootView addSubview:button];
        
        if (i != 0) {
            UIView *sepaView = [[UIView alloc] initWithFrame:CGRectMake(i * button.width, 0, 0.5, auditionFootView.height - 2 * mainSpacing15)];
            sepaView.backgroundColor = SepaViewColor;
            sepaView.centerY = auditionFootView.height * 0.5;
            [auditionFootView addSubview:sepaView];
            
        }
    }
    [self.view addSubview:auditionFootView];
    
    //录音时长
    UIView *recordTime = [[UIView alloc] initWithFrame:CGRectMake(mainSpacing15, CGRectGetMaxY(headerView.frame) + mainSpacing15, self.view.width - 2 * mainSpacing15, 44)];
    recordTime.hidden = YES;
    self.recordTime = recordTime;
    recordTime.layer.cornerRadius = 2.5;
    recordTime.layer.masksToBounds = YES;
    recordTime.backgroundColor = SepaViewColor;
    [self.view addSubview:recordTime];
    
    //滑动条
    UISlider *durationSlider = [[UISlider alloc] initWithFrame:CGRectMake(mainSpacing15, 5, recordTime.width - 2 * mainSpacing15, 20)];
    self.recordDurationSlider = durationSlider;
    [durationSlider addTarget:self action:@selector(durationSliderChange:) forControlEvents:UIControlEventValueChanged];
    [durationSlider setThumbImage:[UIImage imageNamed:@"kc_jindutiao-1"] forState:UIControlStateNormal];
    [durationSlider setThumbImage:[UIImage imageNamed:@"kc_jindutiao-1"] forState:UIControlStateHighlighted];
    headerView.userInteractionEnabled = YES;
    musicContentView.userInteractionEnabled = YES;
    [recordTime addSubview:durationSlider];
    
    [durationSlider setMinimumTrackTintColor:MainColor];
    [durationSlider setMaximumTrackTintColor:RGBCOLOR(237,238,240)];
    
    UILabel *startTime = [[UILabel alloc] initWithFrame:CGRectMake(mainSpacing15, CGRectGetMaxY(durationSlider.frame), recordTime.width * 0.5, 10)];
    startTime.text = @"00:00:00";
    self.startTime = startTime;
    startTime.textColor = MainTextColor;
    startTime.font = [UIFont systemFontOfSize:ys_f24];
    [recordTime addSubview:startTime];
    
    UILabel *endTime = [[UILabel alloc] initWithFrame:CGRectMake(recordTime.width * 0.5, startTime.y, recordTime.width * 0.5 - mainSpacing15, 10)];
    self.endTime = endTime;
    endTime.textAlignment = NSTextAlignmentRight;
    endTime.font = [UIFont systemFontOfSize:ys_f24];
    endTime.textColor = MainTextColor;
    [recordTime addSubview:endTime];
    
    self.navigationItem.leftBarButtonItem = [UIBarButtonItem setRightNavigationBarBackGroundImgName:@"\U0000e807" target:self selector:@selector(back) imageColor:[UIColor whiteColor] imageFont:18];

}

- (void) back
{
    if (timer) {
        dispatch_source_cancel(timer);
    }
    
    if (self.playTimer) {
        [self.playTimer invalidate];
        self.playTimer = nil;
    }
    
    [self.navigationController popViewControllerAnimated:YES];
}

#pragma mark 添加背景音乐
- (void) addButtonClick
{
    
    AddMusicController *vc = [[AddMusicController alloc] init];
    vc.addMusicControllerDelgate = self;
    [self.navigationController pushViewController:vc animated:YES];
}

- (void)addMusic
{
    self.addButton.hidden = YES;
    self.musicContentView.hidden = NO;
    
    NSString *filePath = [[NSBundle mainBundle] pathForResource:@"tonghua" ofType:@"mp3"];
    //文件名转换成url格式
    NSURL *url = [NSURL fileURLWithPath:filePath];
    _selectedSongCH1Player = [[AEAudioFilePlayer alloc] initWithURL:url error:nil];
    _selectedSongCH1Player.volume = 0.4;
    [_audioController addChannels:@[_selectedSongCH1Player]];
    
    
}

-(void)durationSlidersetting
{
    self.durationSlider.minimumValue = 0.0f;
    self.durationSlider.maximumValue = 1.0f;
    self.durationSlider.value = 0.4f;
    self.durationSlider.continuous = YES;
}

- (void) durationSliderChange : (UISlider *) slider
{
    _selectedSongCH1Player.volume = slider.value;
}

- (void) buttonClick : (UIButton *) button
{
    button.selected = !button.selected;
    
    if (button.selected) {
        if (self.statue == Normal) {
            self.startLabel.text = @"正在录音...";
            self.footView.hidden = NO;
            
            _path = [self getPath];
            
            NSError *error = nil;
            if (![_recorder beginRecordingToFileAtPath:_path fileType:kAudioFileM4AType error:&error]) {
                return;
            }
            
            // 同时录制输入及输出通道的声音(即既录人声,也录手机播放的声音)
            [_audioController addInputReceiver:_recorder];
            [_audioController addOutputReceiver:_recorder];
            
            [self creatTimer];
            
            self.statue = Recording;
            
        }else if(self.statue == Recording)
        {
            self.startLabel.text = @"正在录音...";
            [self creatTimer];
            AERecorderStartRecording(_recorder);
            
            self.statue = Normal;

        }
    }else
    {
        if (timer) {
            dispatch_source_cancel(timer); // 异步取消调度源
            timer = nil;
        }
        self.startLabel.text = @"已暂停录音，点击可继续录音";
        AERecorderStopRecording(_recorder);
    }
}

#pragma mark 及时
- (void) creatTimer
{
    dispatch_queue_t globalQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, globalQueue);
    //    每秒执行一次
    dispatch_source_set_timer(timer, dispatch_walltime(NULL, 0), 1.0*NSEC_PER_SEC, 0);
    dispatch_source_set_event_handler(timer, ^{
        int hours = _timeCount / 3600;
        int minutes = (_timeCount - (3600*hours)) / 60;
        int seconds = _timeCount%60;
        NSString *strTime = [NSString stringWithFormat:@"%.2d:%.2d:%.2d",hours,minutes,seconds];
        
        dispatch_async(dispatch_get_main_queue(), ^{
            //           ======在这根据自己的需求去刷新UI==============
            self.timeLabel.text = strTime;
        });
        _timeCount ++;
    });
    dispatch_resume(timer);

}

#pragma mark 停止
- (void)stopCH1Playthrough {
    if (_selectedSongCH1Player) {
        [_audioController removeChannels:@[_selectedSongCH1Player]];
        _selectedSongCH1Player = nil;
    }
}
#pragma mark Helper Method
- (NSString *)getFilePathWithFileName:(NSString *)fileName {
    NSString *documentsFolder = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];
    NSString *filePath = [documentsFolder stringByAppendingPathComponent:fileName];
    return filePath;
}

#pragma mark - 播放录音
- (void)playRecordCH1 {
    // 通过文件名拿到文件路径
    NSString *path = [_paths firstObject];
    
    // 如果文件不存在,结束
    if ( ![[NSFileManager defaultManager] fileExistsAtPath:path] ) {
        return;
    }
    
    NSError *error = nil;
    
    // 利用AEAudioFilePlayer对象进行播放
    _recordVideoPlayer = [[AEAudioFilePlayer alloc] initWithURL:[NSURL fileURLWithPath:path] error:&error];
    if (!_recordVideoPlayer) {
        [[[UIAlertView alloc] initWithTitle:@"Error"
                                    message:[NSString stringWithFormat:@"Couldn't start playback: %@", [error localizedDescription]]
                                   delegate:nil
                          cancelButtonTitle:nil
                          otherButtonTitles:@"OK", nil] show];
        return;
    }
    
    // 进行播放
    [_audioController addChannels:@[_recordVideoPlayer]];
    
    __weak CreateVideoCourseController *weakSelf = self;
    
    _recordVideoPlayer.completionBlock = ^{
        [weakSelf.playTimer invalidate];
        weakSelf.playTimer = nil;
    };
    
    weakSelf.recordDurationSlider.maximumValue = (int)_recordVideoPlayer.duration;
    [weakSelf performSelectorOnMainThread:@selector(invoke) withObject:nil waitUntilDone:YES];

}

-(NSString *)getMMSSFromSS:(NSString *)totalTime{
    
    NSInteger seconds = [totalTime integerValue];
    
    //format of hour
    NSString *str_hour = [NSString stringWithFormat:@"%02ld",seconds/3600];
    //format of minute
    NSString *str_minute = [NSString stringWithFormat:@"%02ld",(seconds%3600)/60];
    //format of second
    NSString *str_second = [NSString stringWithFormat:@"%02ld",seconds%60];
    //format of time
    NSString *format_time = [NSString stringWithFormat:@"%@:%@:%@",str_hour,str_minute,str_second];
    
    return format_time;
}

- (void) invoke
{
    self.endTime.text = [self getMMSSFromSS:[NSString stringWithFormat:@"%f",_recordVideoPlayer.duration]];
}

- (void) footButtonClick : (UIButton *) button
{
    //试听
    if (button.tag == 0) {
        self.statue = ShiTing;
        self.recordButton.selected = NO;
        self.recordButton.hidden = YES;
        self.auditionButton.selected = NO;
        self.auditionButton.hidden = NO;
        self.auditionFootView.hidden = NO;
        self.footView.hidden = YES;
        
        [self addTimer];
        self.recordTime.hidden = NO;
        [self suspendMusic];
        self.startLabel.text = @"正在试听中，点击可暂停试听";
        self.startTime.text = @"00:00:00";
        self.recordDurationSlider.value = 0;
    }
    //重录
    else if(button.tag == 1)
    {
    
        _timeCount = 0;
        self.timeLabel.text = @"00:00:00";
        if (timer) {
            dispatch_source_cancel(timer); // 异步取消调度源
            timer = nil;
        }
        
        [_recorder finishRecording];
        [_audioController removeOutputReceiver:_recorder];
        [_audioController removeInputReceiver:_recorder];
        self.statue = Normal;
        self.footView.hidden = YES;
        self.startLabel.text = @"开始录音";
        self.recordButton.selected = NO;
        [_paths removeAllObjects];
    }
    //保存
    else if(button.tag == 3)
    {
    
        
    }
    
    //裁剪
    else if(button.tag == 2)
    {
        if (!self.recordButton.hidden && self.recordButton.selected) {
            self.recordButton.selected = NO;
            self.startLabel.text = @"已暂停录音，点击可继续录音";
        }
        
        _selectedSongCH1Player.channelIsPlaying = NO;
        
        if (timer) {
            dispatch_source_cancel(timer); // 异步取消调度源
            timer = nil;
        }
        
        [_recorder finishRecording];
        [_audioController removeOutputReceiver:_recorder];
        [_audioController removeInputReceiver:_recorder];
        
        CutMusicController *vc = [[CutMusicController alloc] init];
        vc.videoLength = self.timeLabel.text;
        vc.cutMusicControllerDelete = self;
        if (self.audioController) {
            vc.audioController = self.audioController;
        }
        // 通过文件名拿到文件路径
        vc.videoPath = _path;
        [self.navigationController pushViewController:vc animated:YES];
    }
}

- (void)dealloc
{

}

- (void)addTimer
{
    self.playTimer = [NSTimer scheduledTimerWithTimeInterval:1.0f target:self selector:@selector(timerHandler) userInfo:nil repeats:YES];
}

- (void)timerHandler
{
    if ((int)_recordVideoPlayer.currentTime + 1 <= _recordVideoPlayer.duration) {
        self.recordDurationSlider.value = (int)_recordVideoPlayer.currentTime + 1;
        [self performSelectorOnMainThread:@selector(runItem1) withObject:nil waitUntilDone:YES];
    }
}

- (void) runItem1
{
    self.startTime.text = [DWTools formatSecondsToString:_recordVideoPlayer.currentTime + 1];
}

#pragma mark 试听暂停继续
- (void) auditionButtonClick : (UIButton *) button
{

    button.selected = !button.selected;
    
    if (button.selected) {
        self.startLabel.text = @"已暂停试听，点击可继续试听";
        [self.playTimer setFireDate:[NSDate distantFuture]];
        _recordVideoPlayer.channelIsPlaying = NO;
    }else
    {
        self.startLabel.text = @"正在试听中，点击可暂停试听";
        [self.playTimer setFireDate:[NSDate date]];
        _recordVideoPlayer.channelIsPlaying = YES;
    }
}

#pragma mark 裁剪 试听结束
- (void) auditionFootViewButtonClick : (UIButton *) button
{

    //试听结束
    if (button.tag == 1) {
        if (_recordVideoPlayer) {
            [_audioController removeChannels:@[_recordVideoPlayer]];
            _recordVideoPlayer = nil;
        }
        
        self.openMusic.selected = YES;
        
        self.auditionButton.hidden = YES;
        self.recordButton.hidden = NO;
        self.auditionFootView.hidden = YES;
        self.footView.hidden = NO;
        
        self.startLabel.text = @"已暂停录音，点击可继续录音";
        [self.playTimer invalidate];
        self.playTimer = nil;
        self.recordTime.hidden = YES;
        
        self.statue = Normal;
    }
}

#pragma mark 打开关闭背景音乐
- (void) openMusicClick : (UIButton *) button
{
    button.selected = !button.selected;
    
    _selectedSongCH1Player.channelIsPlaying = !button.selected;
}

#pragma mark 暂停录音和背景音乐
- (void) suspendMusic
{
    _selectedSongCH1Player.channelIsPlaying = NO;
    
    if (timer) {
        dispatch_source_cancel(timer); // 异步取消调度源
        timer = nil;
    }
    
    [_recorder finishRecording];
    [_audioController removeOutputReceiver:_recorder];
    [_audioController removeInputReceiver:_recorder];
    
    [self.paths addObject:_path];
    
    if (self.paths.count == 2) {
        AVURLAsset *audioAsset1 = [AVURLAsset assetWithURL:[NSURL fileURLWithPath:[self.paths firstObject]]];
        AVURLAsset *audioAsset2 = [AVURLAsset assetWithURL:[NSURL fileURLWithPath:[self.paths lastObject]]];
        
        AVMutableComposition *composition = [AVMutableComposition composition];
        
        // 音频通道
        AVMutableCompositionTrack *audioTrack1 = [composition addMutableTrackWithMediaType:AVMediaTypeAudio preferredTrackID:0];
        AVMutableCompositionTrack *audioTrack2 = [composition addMutableTrackWithMediaType:AVMediaTypeAudio preferredTrackID:0];
        
        // 音频采集通道
        AVAssetTrack *audioAssetTrack1 = [[audioAsset1 tracksWithMediaType:AVMediaTypeAudio] firstObject];
        AVAssetTrack *audioAssetTrack2 = [[audioAsset2 tracksWithMediaType:AVMediaTypeAudio] firstObject];
        
        
        // 音频合并 - 插入音轨文件
        [audioTrack1 insertTimeRange:CMTimeRangeMake(kCMTimeZero, audioAsset1.duration) ofTrack:audioAssetTrack1 atTime:kCMTimeZero error:nil];
        // `startTime`参数要设置为第一段音频的时长，即`audioAsset1.duration`, 表示将第二段音频插入到第一段音频的尾部。
        [audioTrack2 insertTimeRange:CMTimeRangeMake(kCMTimeZero, audioAsset2.duration) ofTrack:audioAssetTrack2 atTime:audioAsset1.duration error:nil];
        
        // 合并后的文件导出 - `presetName`要和之后的`session.outputFileType`相对应。
        AVAssetExportSession *session = [[AVAssetExportSession alloc] initWithAsset:composition presetName:AVAssetExportPresetAppleM4A];
        NSString *outPutFilePath = [[self.filePath stringByDeletingLastPathComponent] stringByAppendingPathComponent:@"xindong.m4a"];
        
        if ([[NSFileManager defaultManager] fileExistsAtPath:outPutFilePath]) {
            [[NSFileManager defaultManager] removeItemAtPath:outPutFilePath error:nil];
        }
        
        // 查看当前session支持的fileType类型
        session.outputURL = [NSURL fileURLWithPath:outPutFilePath];
        session.outputFileType = AVFileTypeAppleM4A; //与上述的`present`相对应
        session.shouldOptimizeForNetworkUse = YES;   //优化网络
        
        [session exportAsynchronouslyWithCompletionHandler:^{
            if (session.status == AVAssetExportSessionStatusCompleted) {
                [_paths removeAllObjects];
                [_paths addObject:outPutFilePath];
                
                [self playRecordCH1];
            } else {
                // 其他情况, 具体请看这里`AVAssetExportSessionStatus`.
            }
            
        }];
    }else if(self.paths.count == 1)
    {
        [self playRecordCH1];
    }
    
}

//录制音频沙盒路径
- (NSString *)getPath
{
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setDateFormat:@"YYYYMMddhhmmss"];
    NSString *recordName = [NSString stringWithFormat:@"%@.m4a", [formatter stringFromDate:[NSDate date]]];
    NSString *path = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:recordName];
    
    return path;
}

- (NSString *)filePath {
    if (!_filePath) {
        _filePath = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) firstObject];
        NSString *folderName = [_filePath stringByAppendingPathComponent:@"MergeAudio"];
        BOOL isCreateSuccess = [kFileManager createDirectoryAtPath:folderName withIntermediateDirectories:YES attributes:nil error:nil];
        if (isCreateSuccess) _filePath = [folderName stringByAppendingPathComponent:@"xindong.m4a"];
    }
    return _filePath;
}

- (void)cutMusicSuccess:(NSString *)path
{

    if (self.paths) {
        [self.paths removeAllObjects];
        _path = path;
    }
}


@end
