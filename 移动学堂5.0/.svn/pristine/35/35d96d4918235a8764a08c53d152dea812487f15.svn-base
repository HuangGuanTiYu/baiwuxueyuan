//
//  CutMusicController.m
//  MoveSchool
//
//  Created by edz on 2017/12/22.
//
//

#import "CutMusicController.h"
#import "NMRangeSlider.h"
#import "AERecorder.h"
#import "DWTools.h"
#import <AVFoundation/AVFoundation.h>

#define kFileManager [NSFileManager defaultManager]

@interface CutMusicController ()<NMRangeSliderDelete>

@property (strong, nonatomic) UISlider *recordDurationSlider;

@property (nonatomic, strong) NSTimer *playTimer;

@property (nonatomic, strong) AEAudioFilePlayer *recordVideoPlayer;

@property (nonatomic, strong) UILabel *startTime;

@property (nonatomic, strong) UILabel *startLabel;

@property (nonatomic, strong) UILabel *endLabel;

@property (nonatomic, strong) NSString *filePath;

@end

@implementation CutMusicController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    self.title = @"裁剪";
    
    UIImageView *headerView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, self.view.width, 0)];
    headerView.image = [UIImage imageNamed:@"bg"];
    [self.view addSubview:headerView];
    
    UIImageView *timeView = [[UIImageView alloc] initWithFrame:CGRectMake(0, mainSpacing15, 165, 165)];
    timeView.centerX = self.view.width * 0.5;
    timeView.image = [UIImage imageNamed:@"t_bg"];
    [headerView addSubview:timeView];
    
    UILabel *startLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, timeView.width, 44)];
    startLabel.centerY = timeView.height / 5 * 2 - 2;
    self.startLabel = startLabel;
    startLabel.text = @"00:00:00";
    startLabel.textColor = [UIColor whiteColor];
    startLabel.textAlignment = NSTextAlignmentCenter;
    startLabel.font = [UIFont systemFontOfSize:22];
    [timeView addSubview:startLabel];
    
    UILabel *cneterLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, startLabel.width, mainSpacing)];
    cneterLabel.textAlignment = NSTextAlignmentCenter;
    cneterLabel.centerY = timeView.height * 0.5;
    cneterLabel.text = @"-";
    cneterLabel.textColor = [UIColor whiteColor];
    cneterLabel.font = [UIFont systemFontOfSize:22];
    [timeView addSubview:cneterLabel];

    UILabel *endLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, timeView.width, 44)];
    endLabel.centerY = timeView.height / 5 * 3 + 5;
    self.endLabel = endLabel;
    endLabel.text = @"00:00:00";
    endLabel.textColor = [UIColor whiteColor];
    endLabel.textAlignment = NSTextAlignmentCenter;
    endLabel.font = [UIFont systemFontOfSize:22];
    [timeView addSubview:endLabel];
    
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, CGRectGetMaxY(timeView.frame), self.view.width, 44)];
    titleLabel.text = @"此时间段的内容将被剪掉";
    titleLabel.textColor = [UIColor whiteColor];
    titleLabel.textAlignment = NSTextAlignmentCenter;
    titleLabel.font = [UIFont systemFontOfSize:ys_f24];
    [self.view addSubview:titleLabel];
    
    headerView.height = CGRectGetMaxY(titleLabel.frame) + mainSpacing;
    
    UILabel *subTitle = [[UILabel alloc] initWithFrame:CGRectMake(mainSpacing15, CGRectGetMaxY(headerView.frame), self.view.width -  2 * mainSpacing15, 44)];
    subTitle.font = [UIFont systemFontOfSize:ys_f24];
    subTitle.textColor = AuxiliaryColor;
    NSString *allString = @"拖动裁剪  可自由拖动剪刀，选择需要被剪掉的时间段";
    NSMutableAttributedString *string = [[NSMutableAttributedString alloc] initWithString:allString];
    [string addAttribute:NSFontAttributeName value:[UIFont systemFontOfSize:ys_28] range:[allString rangeOfString:@"拖动裁剪"]];
    [string addAttribute:NSForegroundColorAttributeName value:MainTextColor range:[allString rangeOfString:@"拖动裁剪"]];
    subTitle.attributedText = string;
    [self.view addSubview:subTitle];

    UIView *recordTime = [[UIView alloc] initWithFrame:CGRectMake(mainSpacing15, CGRectGetMaxY(subTitle.frame), self.view.width - 2 * mainSpacing15, 54)];
    recordTime.layer.cornerRadius = 2.5;
    recordTime.layer.masksToBounds = YES;
    recordTime.backgroundColor = SepaViewColor;
    [self.view addSubview:recordTime];
    
    //滑动条
    UISlider *durationSlider = [[UISlider alloc] initWithFrame:CGRectMake(mainSpacing15, 0, recordTime.width - 2 * mainSpacing15, 34)];
    self.recordDurationSlider = durationSlider;
    [durationSlider setThumbImage:[[UIImage alloc] init] forState:UIControlStateNormal];
    [durationSlider setThumbImage:[[UIImage alloc] init] forState:UIControlStateHighlighted];
    headerView.userInteractionEnabled = YES;
    [recordTime addSubview:durationSlider];
    [durationSlider setMinimumTrackTintColor:MainColor];
    [durationSlider setMaximumTrackTintColor:RGBCOLOR(237,238,240)];
    
    NMRangeSlider *rangeSlider = [[NMRangeSlider alloc] initWithFrame:CGRectMake(mainSpacing15, 0, recordTime.width - 2 * mainSpacing15, 34)];
    rangeSlider.nMRangeSliderDelete = self;
    int time = 0;

    if (self.videoLength.length > 0 && [self.videoLength containsString:@":"]) {
        NSArray *times = [self.videoLength componentsSeparatedByString:@":"];
        time = [times[2] intValue];
        time += [times[1] intValue] * 60;
        time += [times[1] intValue] * 60 * 60;
    }
    
    NSString *s = [NSString stringWithFormat:@"%ld",(long)time];
    rangeSlider.maximumValue = [s floatValue];
    
    rangeSlider.lowerValue = 0;
    rangeSlider.upperValue = [s floatValue];
    rangeSlider.lowerHandleImageNormal = [UIImage imageNamed:@"jiandao_left"];
    rangeSlider.lowerHandleImageHighlighted = [UIImage imageNamed:@"jiandao_left"];
    rangeSlider.upperHandleImageNormal = [UIImage imageNamed:@"jiandao_right"];
    rangeSlider.upperHandleImageHighlighted = [UIImage imageNamed:@"jiandao_right"];
    [recordTime addSubview:rangeSlider];
    
    UILabel *startTime = [[UILabel alloc] initWithFrame:CGRectMake(mainSpacing15, CGRectGetMaxY(rangeSlider.frame), recordTime.width * 0.5, 10)];
    startTime.text = @"00:00:00";
    startTime.textColor = MainTextColor;
    startTime.font = [UIFont systemFontOfSize:ys_f24];
    [recordTime addSubview:startTime];
    
    UILabel *endTime = [[UILabel alloc] initWithFrame:CGRectMake(recordTime.width * 0.5, startTime.y, recordTime.width * 0.5 - mainSpacing15, 10)];
    endTime.text = self.videoLength;
    self.startTime = startTime;
    endTime.textAlignment = NSTextAlignmentRight;
    endTime.font = [UIFont systemFontOfSize:ys_f24];
    endTime.textColor = MainTextColor;
    [recordTime addSubview:endTime];
    
    [self playRecordCH1];
    [self addTimer];
    
    self.navigationItem.leftBarButtonItem = [UIBarButtonItem setRightNavigationBarBackGroundImgName:@"\U0000e807" target:self selector:@selector(back) imageColor:[UIColor whiteColor] imageFont:18];
    
    //试听的时候底部菜单
    NSArray *auditionButtonTitles = @[@"取消",@"剪掉"];
    
    //底部菜单
    UIView *auditionFootView = [[UIView alloc] initWithFrame:CGRectMake(0, self.view.height - 44 - 64, self.view.width, 44)];
    UIView *auditionSepaView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, auditionFootView.width, 0.5)];
    auditionSepaView.backgroundColor = SepaViewColor;
    [auditionFootView addSubview:auditionSepaView];
    
    for (int i = 0 ; i < auditionButtonTitles.count; i ++) {
        UIButton *button = [[UIButton alloc] initWithFrame:CGRectMake(0, 0.5, auditionFootView.width * 0.5, auditionFootView.height)];
        [button addTarget:self action:@selector(auditionFootViewButtonClick:) forControlEvents:UIControlEventTouchUpInside];
        button.tag = i;
        [button setTitleColor:MainTextColor forState:UIControlStateNormal];
        button.x = button.width * i;
        [button setTitle:auditionButtonTitles[i] forState:UIControlStateNormal];
        button.titleLabel.font = [UIFont systemFontOfSize:ys_28];
        [auditionFootView addSubview:button];
        
        if (i != 0) {
            UIView *sepaView = [[UIView alloc] initWithFrame:CGRectMake(i * button.width, 0, 0.5, auditionFootView.height - 2 * mainSpacing15)];
            sepaView.backgroundColor = SepaViewColor;
            sepaView.centerY = auditionFootView.height * 0.5;
            [auditionFootView addSubview:sepaView];
            
        }
    }
    [self.view addSubview:auditionFootView];
}

- (void) back
{

    if (self.playTimer) {
        [self.playTimer invalidate];
        self.playTimer = nil;
    }
    
    [self stopCH1Playthrough];
    [self.navigationController popViewControllerAnimated:YES];
}

#pragma mark 停止
- (void)stopCH1Playthrough {
    if (_recordVideoPlayer) {
        [_audioController removeChannels:@[_recordVideoPlayer]];
        _recordVideoPlayer = nil;
    }
}

#pragma mark - 播放录音
- (void)playRecordCH1 {
    // 如果文件不存在,结束
    if ( ![[NSFileManager defaultManager] fileExistsAtPath:self.videoPath] ) {
        return;
    }
    
    NSError *error = nil;
    
    // 利用AEAudioFilePlayer对象进行播放
    _recordVideoPlayer = [[AEAudioFilePlayer alloc] initWithURL:[NSURL fileURLWithPath:self.videoPath] error:&error];
    if (!_recordVideoPlayer) {
        [[[UIAlertView alloc] initWithTitle:@"Error"
                                    message:[NSString stringWithFormat:@"Couldn't start playback: %@", [error localizedDescription]]
                                   delegate:nil
                          cancelButtonTitle:nil
                          otherButtonTitles:@"OK", nil] show];
        return;
    }
    
    // 进行播放
    [_audioController addChannels:@[_recordVideoPlayer]];
    
    __weak CutMusicController *weakSelf = self;
    
    _recordVideoPlayer.completionBlock = ^{
        [weakSelf.playTimer invalidate];
        weakSelf.playTimer = nil;
    };
    
    weakSelf.recordDurationSlider.maximumValue = (int)_recordVideoPlayer.duration;
    
}

- (void)addTimer
{
    self.playTimer = [NSTimer scheduledTimerWithTimeInterval:1.0f target:self selector:@selector(timerHandler) userInfo:nil repeats:YES];
}

- (void)timerHandler
{
    if ((int)_recordVideoPlayer.currentTime + 1 <= _recordVideoPlayer.duration) {
        self.recordDurationSlider.value = (int)_recordVideoPlayer.currentTime + 1;
        [self performSelectorOnMainThread:@selector(runItem1) withObject:nil waitUntilDone:YES];
    }
}

- (void) runItem1
{
    self.startTime.text = [DWTools formatSecondsToString:_recordVideoPlayer.currentTime + 1];
}

- (void)nMRangeSliderStartChange:(NSString *)title
{
    self.startLabel.text = title;
}

- (void)nMRangeSliderEndChange:(NSString *)title
{
    self.endLabel.text = title;
}

- (void)dealloc
{
    
}

- (void) auditionFootViewButtonClick : (UIButton *) button
{
 
    //取消
    if (button.tag == 0) {
        [self back];
    }
    //剪掉
    else if(button.tag == 1)
    {
    
        [self cutMusic:0 endTime:5];
    }
}

#pragma mark 裁剪
- (void)cutMusic : (int64_t) startTime endTime : (int64_t) endTime
{
    [MBProgressHUD showMessage:@"正在裁剪，请稍后"];
    AVURLAsset *videoAsset = [AVURLAsset assetWithURL:[NSURL fileURLWithPath:self.videoPath]];
    //音频输出会话
    //AVAssetExportPresetAppleM4A: This export option will produce an audio-only .m4a file with appropriate iTunes gapless playback data(输出音频,并且是.m4a格式)
    AVAssetExportSession *exportSession = [AVAssetExportSession exportSessionWithAsset:videoAsset presetName:AVAssetExportPresetAppleM4A];
    //设置输出路径 / 文件类型 / 截取时间段
    __weak CutMusicController *weakSelf = self;

    NSString *outPutFilePath = [[self.filePath stringByDeletingLastPathComponent] stringByAppendingPathComponent:@"xindong.m4a"];
    exportSession.outputURL = [NSURL fileURLWithPath:outPutFilePath];
    exportSession.outputFileType = AVFileTypeAppleM4A;
    exportSession.timeRange = CMTimeRangeFromTimeToTime(CMTimeMake(startTime, 1), CMTimeMake(endTime, 1));
    [exportSession exportAsynchronouslyWithCompletionHandler:^{
        if (exportSession.status == AVAssetExportSessionStatusCompleted) {
            [weakSelf performSelectorOnMainThread:@selector(success) withObject:nil waitUntilDone:YES];
        }else
        {
            [weakSelf performSelectorOnMainThread:@selector(error) withObject:nil waitUntilDone:YES];
        }
    }];
}

- (void) error
{
    [MBProgressHUD showError:@"裁剪失败"];
}

- (void) success
{
    __weak CutMusicController *weakSelf = self;
    [MBProgressHUD showSuccess:@"裁剪成功"];
    [weakSelf back];
}

- (NSString *)filePath {
    if (!_filePath) {
        _filePath = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) firstObject];
        NSString *folderName = [_filePath stringByAppendingPathComponent:@"MergeAudio"];
        BOOL isCreateSuccess = [kFileManager createDirectoryAtPath:folderName withIntermediateDirectories:YES attributes:nil error:nil];
        if (isCreateSuccess) _filePath = [folderName stringByAppendingPathComponent:@"xindong.m4a"];
    }
    return _filePath;
}


@end
